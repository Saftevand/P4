//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.5.3
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:\Users\marku\OneDrive\Documents\p4\HaCS\HaCS\HaCS.g4 by ANTLR 4.5.3

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace HaCS {
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using System.Collections.Generic;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.5.3")]
[System.CLSCompliant(false)]
public partial class HaCSParser : Parser {
	public const int
		INT=1, FLOAT=2, CHAR=3, BOOL=4, INT_Type=5, FLOAT_Type=6, CHAR_Type=7, 
		BOOL_Type=8, LIST=9, MAIN=10, IF=11, ELSEIF=12, ELSE=13, RETURN=14, IDENTIFIER=15, 
		EXP=16, MUL=17, DIV=18, MOD=19, ADD=20, SUB=21, AND=22, OR=23, PIPE=24, 
		EQ=25, NEQ=26, GT=27, GE=28, LT=29, DOTDOT=30, LE=31, LTMINUS=32, NEGATE=33, 
		ASSIGN=34, LPAREN=35, RPAREN=36, LBRACKET=37, RBRACKET=38, LCURLBRACKET=39, 
		RCURLBRACKET=40, DELIMITER=41, EOS=42, LAMBDA=43, FIND=44, WS=45, COMMENT=46, 
		LINE_COMMENT=47, WHERE=48, FIRST=49, LAST=50, CONTAINS=51;
	public const int
		RULE_program = 0, RULE_main = 1, RULE_functionDecl = 2, RULE_formalParam = 3, 
		RULE_body = 4, RULE_stmt = 5, RULE_ifStmt = 6, RULE_elseifStmt = 7, RULE_elseStmt = 8, 
		RULE_varDcl = 9, RULE_listDcl = 10, RULE_returnStmt = 11, RULE_expression = 12, 
		RULE_type = 13, RULE_primitiveType = 14, RULE_listOpp = 15, RULE_listType = 16, 
		RULE_compileUnit = 17;
	public static readonly string[] ruleNames = {
		"program", "main", "functionDecl", "formalParam", "body", "stmt", "ifStmt", 
		"elseifStmt", "elseStmt", "varDcl", "listDcl", "returnStmt", "expression", 
		"type", "primitiveType", "listOpp", "listType", "compileUnit"
	};

	private static readonly string[] _LiteralNames = {
		null, null, null, null, null, "'int'", "'float'", "'char'", "'bool'", 
		"'List'", "'main'", "'if'", "'elseif'", "'else'", "'return'", null, "'^'", 
		"'*'", "'/'", "'%'", "'+'", "'-'", "'&&'", "'||'", "'|'", "'=='", "'!='", 
		"'>'", "'>='", "'<'", "'..'", "'<='", "'<-'", "'!'", "'='", "'('", "')'", 
		"'['", "']'", "'{'", "'}'", "','", "';'", "'=>'", "'.find'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "INT", "FLOAT", "CHAR", "BOOL", "INT_Type", "FLOAT_Type", "CHAR_Type", 
		"BOOL_Type", "LIST", "MAIN", "IF", "ELSEIF", "ELSE", "RETURN", "IDENTIFIER", 
		"EXP", "MUL", "DIV", "MOD", "ADD", "SUB", "AND", "OR", "PIPE", "EQ", "NEQ", 
		"GT", "GE", "LT", "DOTDOT", "LE", "LTMINUS", "NEGATE", "ASSIGN", "LPAREN", 
		"RPAREN", "LBRACKET", "RBRACKET", "LCURLBRACKET", "RCURLBRACKET", "DELIMITER", 
		"EOS", "LAMBDA", "FIND", "WS", "COMMENT", "LINE_COMMENT", "WHERE", "FIRST", 
		"LAST", "CONTAINS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[System.Obsolete("Use Vocabulary instead.")]
	public static readonly string[] tokenNames = GenerateTokenNames(DefaultVocabulary, _SymbolicNames.Length);

	private static string[] GenerateTokenNames(IVocabulary vocabulary, int length) {
		string[] tokenNames = new string[length];
		for (int i = 0; i < tokenNames.Length; i++) {
			tokenNames[i] = vocabulary.GetLiteralName(i);
			if (tokenNames[i] == null) {
				tokenNames[i] = vocabulary.GetSymbolicName(i);
			}

			if (tokenNames[i] == null) {
				tokenNames[i] = "<INVALID>";
			}
		}

		return tokenNames;
	}

	[System.Obsolete]
	public override string[] TokenNames
	{
		get
		{
			return tokenNames;
		}
	}

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "HaCS.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }


		protected const int EOF = Eof;

	public HaCSParser(ITokenStream input)
		: base(input)
	{
		_interp = new ParserATNSimulator(this,_ATN);
	}
	public partial class ProgramContext : ParserRuleContext {
		public MainContext main() {
			return GetRuleContext<MainContext>(0);
		}
		public FunctionDeclContext[] functionDecl() {
			return GetRuleContexts<FunctionDeclContext>();
		}
		public FunctionDeclContext functionDecl(int i) {
			return GetRuleContext<FunctionDeclContext>(i);
		}
		public ProgramContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_program; } }
		public override void EnterRule(IParseTreeListener listener) {
			IHaCSListener typedListener = listener as IHaCSListener;
			if (typedListener != null) typedListener.EnterProgram(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IHaCSListener typedListener = listener as IHaCSListener;
			if (typedListener != null) typedListener.ExitProgram(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHaCSVisitor<TResult> typedVisitor = visitor as IHaCSVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProgram(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProgramContext program() {
		ProgramContext _localctx = new ProgramContext(_ctx, State);
		EnterRule(_localctx, 0, RULE_program);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 36; main();
			State = 40;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << INT_Type) | (1L << FLOAT_Type) | (1L << CHAR_Type) | (1L << BOOL_Type) | (1L << LIST) | (1L << LPAREN))) != 0)) {
				{
				{
				State = 37; functionDecl();
				}
				}
				State = 42;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MainContext : ParserRuleContext {
		public ITerminalNode INT_Type() { return GetToken(HaCSParser.INT_Type, 0); }
		public ITerminalNode MAIN() { return GetToken(HaCSParser.MAIN, 0); }
		public BodyContext body() {
			return GetRuleContext<BodyContext>(0);
		}
		public MainContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_main; } }
		public override void EnterRule(IParseTreeListener listener) {
			IHaCSListener typedListener = listener as IHaCSListener;
			if (typedListener != null) typedListener.EnterMain(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IHaCSListener typedListener = listener as IHaCSListener;
			if (typedListener != null) typedListener.ExitMain(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHaCSVisitor<TResult> typedVisitor = visitor as IHaCSVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMain(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MainContext main() {
		MainContext _localctx = new MainContext(_ctx, State);
		EnterRule(_localctx, 2, RULE_main);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 43; Match(INT_Type);
			State = 44; Match(MAIN);
			State = 45; body();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionDeclContext : ParserRuleContext {
		public TypeContext type123;
		public ITerminalNode IDENTIFIER() { return GetToken(HaCSParser.IDENTIFIER, 0); }
		public ITerminalNode LPAREN() { return GetToken(HaCSParser.LPAREN, 0); }
		public FormalParamContext[] formalParam() {
			return GetRuleContexts<FormalParamContext>();
		}
		public FormalParamContext formalParam(int i) {
			return GetRuleContext<FormalParamContext>(i);
		}
		public ITerminalNode RPAREN() { return GetToken(HaCSParser.RPAREN, 0); }
		public BodyContext body() {
			return GetRuleContext<BodyContext>(0);
		}
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public ITerminalNode[] DELIMITER() { return GetTokens(HaCSParser.DELIMITER); }
		public ITerminalNode DELIMITER(int i) {
			return GetToken(HaCSParser.DELIMITER, i);
		}
		public ITerminalNode LAMBDA() { return GetToken(HaCSParser.LAMBDA, 0); }
		public FunctionDeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionDecl; } }
		public override void EnterRule(IParseTreeListener listener) {
			IHaCSListener typedListener = listener as IHaCSListener;
			if (typedListener != null) typedListener.EnterFunctionDecl(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IHaCSListener typedListener = listener as IHaCSListener;
			if (typedListener != null) typedListener.ExitFunctionDecl(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHaCSVisitor<TResult> typedVisitor = visitor as IHaCSVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionDecl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionDeclContext functionDecl() {
		FunctionDeclContext _localctx = new FunctionDeclContext(_ctx, State);
		EnterRule(_localctx, 4, RULE_functionDecl);
		int _la;
		try {
			State = 74;
			switch (_input.La(1)) {
			case INT_Type:
			case FLOAT_Type:
			case CHAR_Type:
			case BOOL_Type:
			case LIST:
				EnterOuterAlt(_localctx, 1);
				{
				State = 47; _localctx.type123 = type();
				State = 48; Match(IDENTIFIER);
				State = 49; Match(LPAREN);
				State = 50; formalParam();
				State = 55;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==DELIMITER) {
					{
					{
					State = 51; Match(DELIMITER);
					State = 52; formalParam();
					}
					}
					State = 57;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				State = 58; Match(RPAREN);
				State = 59; body();
				}
				break;
			case LPAREN:
				EnterOuterAlt(_localctx, 2);
				{
				State = 61; Match(LPAREN);
				State = 62; formalParam();
				State = 67;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==DELIMITER) {
					{
					{
					State = 63; Match(DELIMITER);
					State = 64; formalParam();
					}
					}
					State = 69;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				State = 70; Match(RPAREN);
				State = 71; Match(LAMBDA);
				State = 72; body();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FormalParamContext : ParserRuleContext {
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public ITerminalNode IDENTIFIER() { return GetToken(HaCSParser.IDENTIFIER, 0); }
		public FormalParamContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_formalParam; } }
		public override void EnterRule(IParseTreeListener listener) {
			IHaCSListener typedListener = listener as IHaCSListener;
			if (typedListener != null) typedListener.EnterFormalParam(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IHaCSListener typedListener = listener as IHaCSListener;
			if (typedListener != null) typedListener.ExitFormalParam(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHaCSVisitor<TResult> typedVisitor = visitor as IHaCSVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFormalParam(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FormalParamContext formalParam() {
		FormalParamContext _localctx = new FormalParamContext(_ctx, State);
		EnterRule(_localctx, 6, RULE_formalParam);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 76; type();
			State = 77; Match(IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BodyContext : ParserRuleContext {
		public ITerminalNode LCURLBRACKET() { return GetToken(HaCSParser.LCURLBRACKET, 0); }
		public ITerminalNode RCURLBRACKET() { return GetToken(HaCSParser.RCURLBRACKET, 0); }
		public StmtContext[] stmt() {
			return GetRuleContexts<StmtContext>();
		}
		public StmtContext stmt(int i) {
			return GetRuleContext<StmtContext>(i);
		}
		public BodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_body; } }
		public override void EnterRule(IParseTreeListener listener) {
			IHaCSListener typedListener = listener as IHaCSListener;
			if (typedListener != null) typedListener.EnterBody(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IHaCSListener typedListener = listener as IHaCSListener;
			if (typedListener != null) typedListener.ExitBody(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHaCSVisitor<TResult> typedVisitor = visitor as IHaCSVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBody(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BodyContext body() {
		BodyContext _localctx = new BodyContext(_ctx, State);
		EnterRule(_localctx, 8, RULE_body);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 79; Match(LCURLBRACKET);
			State = 83;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << INT_Type) | (1L << FLOAT_Type) | (1L << CHAR_Type) | (1L << BOOL_Type) | (1L << LIST) | (1L << IF) | (1L << RETURN))) != 0)) {
				{
				{
				State = 80; stmt();
				}
				}
				State = 85;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 86; Match(RCURLBRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StmtContext : ParserRuleContext {
		public IfStmtContext ifStmt() {
			return GetRuleContext<IfStmtContext>(0);
		}
		public VarDclContext varDcl() {
			return GetRuleContext<VarDclContext>(0);
		}
		public ITerminalNode EOS() { return GetToken(HaCSParser.EOS, 0); }
		public ReturnStmtContext returnStmt() {
			return GetRuleContext<ReturnStmtContext>(0);
		}
		public StmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IHaCSListener typedListener = listener as IHaCSListener;
			if (typedListener != null) typedListener.EnterStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IHaCSListener typedListener = listener as IHaCSListener;
			if (typedListener != null) typedListener.ExitStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHaCSVisitor<TResult> typedVisitor = visitor as IHaCSVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StmtContext stmt() {
		StmtContext _localctx = new StmtContext(_ctx, State);
		EnterRule(_localctx, 10, RULE_stmt);
		try {
			State = 95;
			switch (_input.La(1)) {
			case IF:
				EnterOuterAlt(_localctx, 1);
				{
				State = 88; ifStmt();
				}
				break;
			case INT_Type:
			case FLOAT_Type:
			case CHAR_Type:
			case BOOL_Type:
			case LIST:
				EnterOuterAlt(_localctx, 2);
				{
				State = 89; varDcl();
				State = 90; Match(EOS);
				}
				break;
			case RETURN:
				EnterOuterAlt(_localctx, 3);
				{
				State = 92; returnStmt();
				State = 93; Match(EOS);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfStmtContext : ParserRuleContext {
		public ExpressionContext exp1;
		public ITerminalNode IF() { return GetToken(HaCSParser.IF, 0); }
		public ITerminalNode LPAREN() { return GetToken(HaCSParser.LPAREN, 0); }
		public ITerminalNode RPAREN() { return GetToken(HaCSParser.RPAREN, 0); }
		public BodyContext body() {
			return GetRuleContext<BodyContext>(0);
		}
		public ElseifStmtContext elseifStmt() {
			return GetRuleContext<ElseifStmtContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public IfStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IHaCSListener typedListener = listener as IHaCSListener;
			if (typedListener != null) typedListener.EnterIfStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IHaCSListener typedListener = listener as IHaCSListener;
			if (typedListener != null) typedListener.ExitIfStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHaCSVisitor<TResult> typedVisitor = visitor as IHaCSVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IfStmtContext ifStmt() {
		IfStmtContext _localctx = new IfStmtContext(_ctx, State);
		EnterRule(_localctx, 12, RULE_ifStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 97; Match(IF);
			State = 98; Match(LPAREN);
			State = 99; _localctx.exp1 = expression(0);
			State = 100; Match(RPAREN);
			State = 101; body();
			State = 102; elseifStmt();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ElseifStmtContext : ParserRuleContext {
		public ExpressionContext exp2;
		public ITerminalNode ELSEIF() { return GetToken(HaCSParser.ELSEIF, 0); }
		public ITerminalNode LPAREN() { return GetToken(HaCSParser.LPAREN, 0); }
		public ITerminalNode RPAREN() { return GetToken(HaCSParser.RPAREN, 0); }
		public BodyContext body() {
			return GetRuleContext<BodyContext>(0);
		}
		public ElseifStmtContext elseifStmt() {
			return GetRuleContext<ElseifStmtContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ElseStmtContext elseStmt() {
			return GetRuleContext<ElseStmtContext>(0);
		}
		public ElseifStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_elseifStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IHaCSListener typedListener = listener as IHaCSListener;
			if (typedListener != null) typedListener.EnterElseifStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IHaCSListener typedListener = listener as IHaCSListener;
			if (typedListener != null) typedListener.ExitElseifStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHaCSVisitor<TResult> typedVisitor = visitor as IHaCSVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElseifStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ElseifStmtContext elseifStmt() {
		ElseifStmtContext _localctx = new ElseifStmtContext(_ctx, State);
		EnterRule(_localctx, 14, RULE_elseifStmt);
		int _la;
		try {
			State = 114;
			switch (_input.La(1)) {
			case ELSEIF:
				EnterOuterAlt(_localctx, 1);
				{
				State = 104; Match(ELSEIF);
				State = 105; Match(LPAREN);
				State = 106; _localctx.exp2 = expression(0);
				State = 107; Match(RPAREN);
				State = 108; body();
				State = 109; elseifStmt();
				}
				break;
			case INT_Type:
			case FLOAT_Type:
			case CHAR_Type:
			case BOOL_Type:
			case LIST:
			case IF:
			case ELSE:
			case RETURN:
			case RCURLBRACKET:
				EnterOuterAlt(_localctx, 2);
				{
				State = 112;
				_la = _input.La(1);
				if (_la==ELSE) {
					{
					State = 111; elseStmt();
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ElseStmtContext : ParserRuleContext {
		public ITerminalNode ELSE() { return GetToken(HaCSParser.ELSE, 0); }
		public BodyContext body() {
			return GetRuleContext<BodyContext>(0);
		}
		public ElseStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_elseStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IHaCSListener typedListener = listener as IHaCSListener;
			if (typedListener != null) typedListener.EnterElseStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IHaCSListener typedListener = listener as IHaCSListener;
			if (typedListener != null) typedListener.ExitElseStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHaCSVisitor<TResult> typedVisitor = visitor as IHaCSVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElseStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ElseStmtContext elseStmt() {
		ElseStmtContext _localctx = new ElseStmtContext(_ctx, State);
		EnterRule(_localctx, 16, RULE_elseStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 116; Match(ELSE);
			State = 117; body();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VarDclContext : ParserRuleContext {
		public PrimitiveTypeContext left;
		public ExpressionContext right;
		public ITerminalNode IDENTIFIER() { return GetToken(HaCSParser.IDENTIFIER, 0); }
		public ITerminalNode ASSIGN() { return GetToken(HaCSParser.ASSIGN, 0); }
		public PrimitiveTypeContext primitiveType() {
			return GetRuleContext<PrimitiveTypeContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ListTypeContext listType() {
			return GetRuleContext<ListTypeContext>(0);
		}
		public ListDclContext listDcl() {
			return GetRuleContext<ListDclContext>(0);
		}
		public VarDclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_varDcl; } }
		public override void EnterRule(IParseTreeListener listener) {
			IHaCSListener typedListener = listener as IHaCSListener;
			if (typedListener != null) typedListener.EnterVarDcl(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IHaCSListener typedListener = listener as IHaCSListener;
			if (typedListener != null) typedListener.ExitVarDcl(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHaCSVisitor<TResult> typedVisitor = visitor as IHaCSVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVarDcl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VarDclContext varDcl() {
		VarDclContext _localctx = new VarDclContext(_ctx, State);
		EnterRule(_localctx, 18, RULE_varDcl);
		try {
			State = 129;
			switch (_input.La(1)) {
			case INT_Type:
			case FLOAT_Type:
			case CHAR_Type:
			case BOOL_Type:
				EnterOuterAlt(_localctx, 1);
				{
				State = 119; _localctx.left = primitiveType();
				State = 120; Match(IDENTIFIER);
				State = 121; Match(ASSIGN);
				State = 122; _localctx.right = expression(0);
				}
				break;
			case LIST:
				EnterOuterAlt(_localctx, 2);
				{
				State = 124; listType();
				State = 125; Match(IDENTIFIER);
				State = 126; Match(ASSIGN);
				State = 127; listDcl();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ListDclContext : ParserRuleContext {
		public ITerminalNode LCURLBRACKET() { return GetToken(HaCSParser.LCURLBRACKET, 0); }
		public ListDclContext[] listDcl() {
			return GetRuleContexts<ListDclContext>();
		}
		public ListDclContext listDcl(int i) {
			return GetRuleContext<ListDclContext>(i);
		}
		public ITerminalNode RCURLBRACKET() { return GetToken(HaCSParser.RCURLBRACKET, 0); }
		public ITerminalNode[] DELIMITER() { return GetTokens(HaCSParser.DELIMITER); }
		public ITerminalNode DELIMITER(int i) {
			return GetToken(HaCSParser.DELIMITER, i);
		}
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ListDclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_listDcl; } }
		public override void EnterRule(IParseTreeListener listener) {
			IHaCSListener typedListener = listener as IHaCSListener;
			if (typedListener != null) typedListener.EnterListDcl(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IHaCSListener typedListener = listener as IHaCSListener;
			if (typedListener != null) typedListener.ExitListDcl(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHaCSVisitor<TResult> typedVisitor = visitor as IHaCSVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitListDcl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ListDclContext listDcl() {
		ListDclContext _localctx = new ListDclContext(_ctx, State);
		EnterRule(_localctx, 20, RULE_listDcl);
		int _la;
		try {
			int _alt;
			State = 150;
			switch (_input.La(1)) {
			case LCURLBRACKET:
				EnterOuterAlt(_localctx, 1);
				{
				State = 131; Match(LCURLBRACKET);
				State = 132; listDcl();
				State = 137;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==DELIMITER) {
					{
					{
					State = 133; Match(DELIMITER);
					State = 134; listDcl();
					}
					}
					State = 139;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				State = 140; Match(RCURLBRACKET);
				}
				break;
			case INT:
			case FLOAT:
			case CHAR:
			case BOOL:
			case IDENTIFIER:
			case NEGATE:
			case LPAREN:
			case LBRACKET:
				EnterOuterAlt(_localctx, 2);
				{
				State = 142; expression(0);
				State = 147;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,10,_ctx);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
					if ( _alt==1 ) {
						{
						{
						State = 143; Match(DELIMITER);
						State = 144; expression(0);
						}
						} 
					}
					State = 149;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,10,_ctx);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReturnStmtContext : ParserRuleContext {
		public ITerminalNode RETURN() { return GetToken(HaCSParser.RETURN, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ReturnStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_returnStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IHaCSListener typedListener = listener as IHaCSListener;
			if (typedListener != null) typedListener.EnterReturnStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IHaCSListener typedListener = listener as IHaCSListener;
			if (typedListener != null) typedListener.ExitReturnStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHaCSVisitor<TResult> typedVisitor = visitor as IHaCSVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReturnStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ReturnStmtContext returnStmt() {
		ReturnStmtContext _localctx = new ReturnStmtContext(_ctx, State);
		EnterRule(_localctx, 22, RULE_returnStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 152; Match(RETURN);
			State = 153; expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
	 
		public ExpressionContext() { }
		public virtual void CopyFrom(ExpressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class OrContext : ExpressionContext {
		public ExpressionContext left;
		public ExpressionContext right;
		public ITerminalNode OR() { return GetToken(HaCSParser.OR, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public OrContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IHaCSListener typedListener = listener as IHaCSListener;
			if (typedListener != null) typedListener.EnterOr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IHaCSListener typedListener = listener as IHaCSListener;
			if (typedListener != null) typedListener.ExitOr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHaCSVisitor<TResult> typedVisitor = visitor as IHaCSVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExponentContext : ExpressionContext {
		public ExpressionContext left;
		public ExpressionContext right;
		public ITerminalNode EXP() { return GetToken(HaCSParser.EXP, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ExponentContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IHaCSListener typedListener = listener as IHaCSListener;
			if (typedListener != null) typedListener.EnterExponent(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IHaCSListener typedListener = listener as IHaCSListener;
			if (typedListener != null) typedListener.ExitExponent(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHaCSVisitor<TResult> typedVisitor = visitor as IHaCSVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExponent(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Arith2Context : ExpressionContext {
		public ExpressionContext left;
		public ExpressionContext right;
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode MUL() { return GetToken(HaCSParser.MUL, 0); }
		public ITerminalNode DIV() { return GetToken(HaCSParser.DIV, 0); }
		public ITerminalNode MOD() { return GetToken(HaCSParser.MOD, 0); }
		public Arith2Context(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IHaCSListener typedListener = listener as IHaCSListener;
			if (typedListener != null) typedListener.EnterArith2(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IHaCSListener typedListener = listener as IHaCSListener;
			if (typedListener != null) typedListener.ExitArith2(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHaCSVisitor<TResult> typedVisitor = visitor as IHaCSVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArith2(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class FuncContext : ExpressionContext {
		public ExpressionContext exp;
		public ExpressionContext expList;
		public ITerminalNode IDENTIFIER() { return GetToken(HaCSParser.IDENTIFIER, 0); }
		public ITerminalNode LPAREN() { return GetToken(HaCSParser.LPAREN, 0); }
		public ITerminalNode RPAREN() { return GetToken(HaCSParser.RPAREN, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode[] DELIMITER() { return GetTokens(HaCSParser.DELIMITER); }
		public ITerminalNode DELIMITER(int i) {
			return GetToken(HaCSParser.DELIMITER, i);
		}
		public FuncContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IHaCSListener typedListener = listener as IHaCSListener;
			if (typedListener != null) typedListener.EnterFunc(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IHaCSListener typedListener = listener as IHaCSListener;
			if (typedListener != null) typedListener.ExitFunc(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHaCSVisitor<TResult> typedVisitor = visitor as IHaCSVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunc(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ParensContext : ExpressionContext {
		public ITerminalNode LPAREN() { return GetToken(HaCSParser.LPAREN, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode RPAREN() { return GetToken(HaCSParser.RPAREN, 0); }
		public ParensContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IHaCSListener typedListener = listener as IHaCSListener;
			if (typedListener != null) typedListener.EnterParens(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IHaCSListener typedListener = listener as IHaCSListener;
			if (typedListener != null) typedListener.ExitParens(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHaCSVisitor<TResult> typedVisitor = visitor as IHaCSVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParens(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VarContext : ExpressionContext {
		public ITerminalNode IDENTIFIER() { return GetToken(HaCSParser.IDENTIFIER, 0); }
		public ListOppContext listOpp() {
			return GetRuleContext<ListOppContext>(0);
		}
		public VarContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IHaCSListener typedListener = listener as IHaCSListener;
			if (typedListener != null) typedListener.EnterVar(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IHaCSListener typedListener = listener as IHaCSListener;
			if (typedListener != null) typedListener.ExitVar(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHaCSVisitor<TResult> typedVisitor = visitor as IHaCSVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVar(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Arith1Context : ExpressionContext {
		public ExpressionContext left;
		public ExpressionContext right;
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode ADD() { return GetToken(HaCSParser.ADD, 0); }
		public ITerminalNode SUB() { return GetToken(HaCSParser.SUB, 0); }
		public Arith1Context(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IHaCSListener typedListener = listener as IHaCSListener;
			if (typedListener != null) typedListener.EnterArith1(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IHaCSListener typedListener = listener as IHaCSListener;
			if (typedListener != null) typedListener.ExitArith1(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHaCSVisitor<TResult> typedVisitor = visitor as IHaCSVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArith1(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PipeContext : ExpressionContext {
		public ExpressionContext left;
		public ExpressionContext right;
		public ITerminalNode PIPE() { return GetToken(HaCSParser.PIPE, 0); }
		public ITerminalNode IDENTIFIER() { return GetToken(HaCSParser.IDENTIFIER, 0); }
		public ITerminalNode LTMINUS() { return GetToken(HaCSParser.LTMINUS, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public PipeContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IHaCSListener typedListener = listener as IHaCSListener;
			if (typedListener != null) typedListener.EnterPipe(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IHaCSListener typedListener = listener as IHaCSListener;
			if (typedListener != null) typedListener.ExitPipe(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHaCSVisitor<TResult> typedVisitor = visitor as IHaCSVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPipe(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class RangeContext : ExpressionContext {
		public ITerminalNode LBRACKET() { return GetToken(HaCSParser.LBRACKET, 0); }
		public ITerminalNode[] IDENTIFIER() { return GetTokens(HaCSParser.IDENTIFIER); }
		public ITerminalNode IDENTIFIER(int i) {
			return GetToken(HaCSParser.IDENTIFIER, i);
		}
		public ITerminalNode DOTDOT() { return GetToken(HaCSParser.DOTDOT, 0); }
		public ITerminalNode RBRACKET() { return GetToken(HaCSParser.RBRACKET, 0); }
		public RangeContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IHaCSListener typedListener = listener as IHaCSListener;
			if (typedListener != null) typedListener.EnterRange(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IHaCSListener typedListener = listener as IHaCSListener;
			if (typedListener != null) typedListener.ExitRange(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHaCSVisitor<TResult> typedVisitor = visitor as IHaCSVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRange(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AndContext : ExpressionContext {
		public ExpressionContext left;
		public ExpressionContext right;
		public ITerminalNode AND() { return GetToken(HaCSParser.AND, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public AndContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IHaCSListener typedListener = listener as IHaCSListener;
			if (typedListener != null) typedListener.EnterAnd(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IHaCSListener typedListener = listener as IHaCSListener;
			if (typedListener != null) typedListener.ExitAnd(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHaCSVisitor<TResult> typedVisitor = visitor as IHaCSVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAnd(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LitContext : ExpressionContext {
		public ITerminalNode INT() { return GetToken(HaCSParser.INT, 0); }
		public ITerminalNode FLOAT() { return GetToken(HaCSParser.FLOAT, 0); }
		public ITerminalNode CHAR() { return GetToken(HaCSParser.CHAR, 0); }
		public ITerminalNode BOOL() { return GetToken(HaCSParser.BOOL, 0); }
		public LitContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IHaCSListener typedListener = listener as IHaCSListener;
			if (typedListener != null) typedListener.EnterLit(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IHaCSListener typedListener = listener as IHaCSListener;
			if (typedListener != null) typedListener.ExitLit(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHaCSVisitor<TResult> typedVisitor = visitor as IHaCSVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLit(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class CompareContext : ExpressionContext {
		public ExpressionContext left;
		public ExpressionContext right;
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode LE() { return GetToken(HaCSParser.LE, 0); }
		public ITerminalNode GE() { return GetToken(HaCSParser.GE, 0); }
		public ITerminalNode GT() { return GetToken(HaCSParser.GT, 0); }
		public ITerminalNode LT() { return GetToken(HaCSParser.LT, 0); }
		public CompareContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IHaCSListener typedListener = listener as IHaCSListener;
			if (typedListener != null) typedListener.EnterCompare(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IHaCSListener typedListener = listener as IHaCSListener;
			if (typedListener != null) typedListener.ExitCompare(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHaCSVisitor<TResult> typedVisitor = visitor as IHaCSVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCompare(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NegateContext : ExpressionContext {
		public ITerminalNode NEGATE() { return GetToken(HaCSParser.NEGATE, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public NegateContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IHaCSListener typedListener = listener as IHaCSListener;
			if (typedListener != null) typedListener.EnterNegate(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IHaCSListener typedListener = listener as IHaCSListener;
			if (typedListener != null) typedListener.ExitNegate(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHaCSVisitor<TResult> typedVisitor = visitor as IHaCSVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNegate(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class EqualityContext : ExpressionContext {
		public ExpressionContext left;
		public ExpressionContext right;
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode EQ() { return GetToken(HaCSParser.EQ, 0); }
		public ITerminalNode NEQ() { return GetToken(HaCSParser.NEQ, 0); }
		public EqualityContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IHaCSListener typedListener = listener as IHaCSListener;
			if (typedListener != null) typedListener.EnterEquality(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IHaCSListener typedListener = listener as IHaCSListener;
			if (typedListener != null) typedListener.ExitEquality(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHaCSVisitor<TResult> typedVisitor = visitor as IHaCSVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEquality(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		return expression(0);
	}

	private ExpressionContext expression(int _p) {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = State;
		ExpressionContext _localctx = new ExpressionContext(_ctx, _parentState);
		ExpressionContext _prevctx = _localctx;
		int _startState = 24;
		EnterRecursionRule(_localctx, 24, RULE_expression, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 184;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,14,_ctx) ) {
			case 1:
				{
				_localctx = new ParensContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;

				State = 156; Match(LPAREN);
				State = 157; expression(0);
				State = 158; Match(RPAREN);
				}
				break;

			case 2:
				{
				_localctx = new NegateContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 160; Match(NEGATE);
				State = 161; expression(13);
				}
				break;

			case 3:
				{
				_localctx = new FuncContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 162; Match(IDENTIFIER);
				State = 163; Match(LPAREN);
				State = 164; ((FuncContext)_localctx).exp = expression(0);
				State = 169;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==DELIMITER) {
					{
					{
					State = 165; Match(DELIMITER);
					State = 166; ((FuncContext)_localctx).expList = expression(0);
					}
					}
					State = 171;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				State = 172; Match(RPAREN);
				}
				break;

			case 4:
				{
				_localctx = new LitContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 174;
				_la = _input.La(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << INT) | (1L << FLOAT) | (1L << CHAR) | (1L << BOOL))) != 0)) ) {
				_errHandler.RecoverInline(this);
				} else {
					Consume();
				}
				}
				break;

			case 5:
				{
				_localctx = new VarContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 175; Match(IDENTIFIER);
				State = 177;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,13,_ctx) ) {
				case 1:
					{
					State = 176; listOpp();
					}
					break;
				}
				}
				break;

			case 6:
				{
				_localctx = new RangeContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 179; Match(LBRACKET);
				State = 180; Match(IDENTIFIER);
				State = 181; Match(DOTDOT);
				State = 182; Match(IDENTIFIER);
				State = 183; Match(RBRACKET);
				}
				break;
			}
			_ctx.stop = _input.Lt(-1);
			State = 214;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,16,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 212;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,15,_ctx) ) {
					case 1:
						{
						_localctx = new ExponentContext(new ExpressionContext(_parentctx, _parentState));
						((ExponentContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 186;
						if (!(Precpred(_ctx, 12))) throw new FailedPredicateException(this, "Precpred(_ctx, 12)");
						State = 187; Match(EXP);
						State = 188; ((ExponentContext)_localctx).right = expression(13);
						}
						break;

					case 2:
						{
						_localctx = new Arith2Context(new ExpressionContext(_parentctx, _parentState));
						((Arith2Context)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 189;
						if (!(Precpred(_ctx, 11))) throw new FailedPredicateException(this, "Precpred(_ctx, 11)");
						State = 190;
						_la = _input.La(1);
						if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << MUL) | (1L << DIV) | (1L << MOD))) != 0)) ) {
						_errHandler.RecoverInline(this);
						} else {
							Consume();
						}
						State = 191; ((Arith2Context)_localctx).right = expression(12);
						}
						break;

					case 3:
						{
						_localctx = new Arith1Context(new ExpressionContext(_parentctx, _parentState));
						((Arith1Context)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 192;
						if (!(Precpred(_ctx, 10))) throw new FailedPredicateException(this, "Precpred(_ctx, 10)");
						State = 193;
						_la = _input.La(1);
						if ( !(_la==ADD || _la==SUB) ) {
						_errHandler.RecoverInline(this);
						} else {
							Consume();
						}
						State = 194; ((Arith1Context)_localctx).right = expression(11);
						}
						break;

					case 4:
						{
						_localctx = new CompareContext(new ExpressionContext(_parentctx, _parentState));
						((CompareContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 195;
						if (!(Precpred(_ctx, 9))) throw new FailedPredicateException(this, "Precpred(_ctx, 9)");
						State = 196;
						_la = _input.La(1);
						if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << GT) | (1L << GE) | (1L << LT) | (1L << LE))) != 0)) ) {
						_errHandler.RecoverInline(this);
						} else {
							Consume();
						}
						State = 197; ((CompareContext)_localctx).right = expression(10);
						}
						break;

					case 5:
						{
						_localctx = new EqualityContext(new ExpressionContext(_parentctx, _parentState));
						((EqualityContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 198;
						if (!(Precpred(_ctx, 8))) throw new FailedPredicateException(this, "Precpred(_ctx, 8)");
						State = 199;
						_la = _input.La(1);
						if ( !(_la==EQ || _la==NEQ) ) {
						_errHandler.RecoverInline(this);
						} else {
							Consume();
						}
						State = 200; ((EqualityContext)_localctx).right = expression(9);
						}
						break;

					case 6:
						{
						_localctx = new PipeContext(new ExpressionContext(_parentctx, _parentState));
						((PipeContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 201;
						if (!(Precpred(_ctx, 7))) throw new FailedPredicateException(this, "Precpred(_ctx, 7)");
						State = 202; Match(PIPE);
						State = 203; Match(IDENTIFIER);
						State = 204; Match(LTMINUS);
						State = 205; ((PipeContext)_localctx).right = expression(8);
						}
						break;

					case 7:
						{
						_localctx = new AndContext(new ExpressionContext(_parentctx, _parentState));
						((AndContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 206;
						if (!(Precpred(_ctx, 6))) throw new FailedPredicateException(this, "Precpred(_ctx, 6)");
						State = 207; Match(AND);
						State = 208; ((AndContext)_localctx).right = expression(7);
						}
						break;

					case 8:
						{
						_localctx = new OrContext(new ExpressionContext(_parentctx, _parentState));
						((OrContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 209;
						if (!(Precpred(_ctx, 5))) throw new FailedPredicateException(this, "Precpred(_ctx, 5)");
						State = 210; Match(OR);
						State = 211; ((OrContext)_localctx).right = expression(6);
						}
						break;
					}
					} 
				}
				State = 216;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,16,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class TypeContext : ParserRuleContext {
		public PrimitiveTypeContext primitiveType() {
			return GetRuleContext<PrimitiveTypeContext>(0);
		}
		public ListTypeContext listType() {
			return GetRuleContext<ListTypeContext>(0);
		}
		public TypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type; } }
		public override void EnterRule(IParseTreeListener listener) {
			IHaCSListener typedListener = listener as IHaCSListener;
			if (typedListener != null) typedListener.EnterType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IHaCSListener typedListener = listener as IHaCSListener;
			if (typedListener != null) typedListener.ExitType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHaCSVisitor<TResult> typedVisitor = visitor as IHaCSVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeContext type() {
		TypeContext _localctx = new TypeContext(_ctx, State);
		EnterRule(_localctx, 26, RULE_type);
		try {
			State = 219;
			switch (_input.La(1)) {
			case INT_Type:
			case FLOAT_Type:
			case CHAR_Type:
			case BOOL_Type:
				EnterOuterAlt(_localctx, 1);
				{
				State = 217; primitiveType();
				}
				break;
			case LIST:
				EnterOuterAlt(_localctx, 2);
				{
				State = 218; listType();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrimitiveTypeContext : ParserRuleContext {
		public ITerminalNode INT_Type() { return GetToken(HaCSParser.INT_Type, 0); }
		public ITerminalNode CHAR_Type() { return GetToken(HaCSParser.CHAR_Type, 0); }
		public ITerminalNode FLOAT_Type() { return GetToken(HaCSParser.FLOAT_Type, 0); }
		public ITerminalNode BOOL_Type() { return GetToken(HaCSParser.BOOL_Type, 0); }
		public PrimitiveTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_primitiveType; } }
		public override void EnterRule(IParseTreeListener listener) {
			IHaCSListener typedListener = listener as IHaCSListener;
			if (typedListener != null) typedListener.EnterPrimitiveType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IHaCSListener typedListener = listener as IHaCSListener;
			if (typedListener != null) typedListener.ExitPrimitiveType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHaCSVisitor<TResult> typedVisitor = visitor as IHaCSVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrimitiveType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrimitiveTypeContext primitiveType() {
		PrimitiveTypeContext _localctx = new PrimitiveTypeContext(_ctx, State);
		EnterRule(_localctx, 28, RULE_primitiveType);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 221;
			_la = _input.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << INT_Type) | (1L << FLOAT_Type) | (1L << CHAR_Type) | (1L << BOOL_Type))) != 0)) ) {
			_errHandler.RecoverInline(this);
			} else {
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ListOppContext : ParserRuleContext {
		public ITerminalNode FIND() { return GetToken(HaCSParser.FIND, 0); }
		public ITerminalNode LPAREN() { return GetToken(HaCSParser.LPAREN, 0); }
		public ITerminalNode RPAREN() { return GetToken(HaCSParser.RPAREN, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode WHERE() { return GetToken(HaCSParser.WHERE, 0); }
		public ITerminalNode FIRST() { return GetToken(HaCSParser.FIRST, 0); }
		public ITerminalNode LAST() { return GetToken(HaCSParser.LAST, 0); }
		public ITerminalNode CONTAINS() { return GetToken(HaCSParser.CONTAINS, 0); }
		public ITerminalNode IDENTIFIER() { return GetToken(HaCSParser.IDENTIFIER, 0); }
		public ListOppContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_listOpp; } }
		public override void EnterRule(IParseTreeListener listener) {
			IHaCSListener typedListener = listener as IHaCSListener;
			if (typedListener != null) typedListener.EnterListOpp(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IHaCSListener typedListener = listener as IHaCSListener;
			if (typedListener != null) typedListener.ExitListOpp(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHaCSVisitor<TResult> typedVisitor = visitor as IHaCSVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitListOpp(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ListOppContext listOpp() {
		ListOppContext _localctx = new ListOppContext(_ctx, State);
		EnterRule(_localctx, 30, RULE_listOpp);
		int _la;
		try {
			State = 245;
			switch (_input.La(1)) {
			case FIND:
				EnterOuterAlt(_localctx, 1);
				{
				State = 223; Match(FIND);
				State = 224; Match(LPAREN);
				State = 226;
				_la = _input.La(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << INT) | (1L << FLOAT) | (1L << CHAR) | (1L << BOOL) | (1L << IDENTIFIER) | (1L << NEGATE) | (1L << LPAREN) | (1L << LBRACKET))) != 0)) {
					{
					State = 225; expression(0);
					}
				}

				State = 228; Match(RPAREN);
				}
				break;
			case WHERE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 229; Match(WHERE);
				State = 230; Match(LPAREN);
				State = 232;
				_la = _input.La(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << INT) | (1L << FLOAT) | (1L << CHAR) | (1L << BOOL) | (1L << IDENTIFIER) | (1L << NEGATE) | (1L << LPAREN) | (1L << LBRACKET))) != 0)) {
					{
					State = 231; expression(0);
					}
				}

				State = 234; Match(RPAREN);
				}
				break;
			case FIRST:
				EnterOuterAlt(_localctx, 3);
				{
				State = 235; Match(FIRST);
				State = 236; Match(LPAREN);
				State = 237; Match(RPAREN);
				}
				break;
			case LAST:
				EnterOuterAlt(_localctx, 4);
				{
				State = 238; Match(LAST);
				State = 239; Match(LPAREN);
				State = 240; Match(RPAREN);
				}
				break;
			case CONTAINS:
				EnterOuterAlt(_localctx, 5);
				{
				State = 241; Match(CONTAINS);
				State = 242; Match(LPAREN);
				State = 243; Match(IDENTIFIER);
				State = 244; Match(RPAREN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ListTypeContext : ParserRuleContext {
		public ITerminalNode LIST() { return GetToken(HaCSParser.LIST, 0); }
		public ITerminalNode LT() { return GetToken(HaCSParser.LT, 0); }
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public ITerminalNode GT() { return GetToken(HaCSParser.GT, 0); }
		public ListTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_listType; } }
		public override void EnterRule(IParseTreeListener listener) {
			IHaCSListener typedListener = listener as IHaCSListener;
			if (typedListener != null) typedListener.EnterListType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IHaCSListener typedListener = listener as IHaCSListener;
			if (typedListener != null) typedListener.ExitListType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHaCSVisitor<TResult> typedVisitor = visitor as IHaCSVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitListType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ListTypeContext listType() {
		ListTypeContext _localctx = new ListTypeContext(_ctx, State);
		EnterRule(_localctx, 32, RULE_listType);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 247; Match(LIST);
			State = 248; Match(LT);
			State = 249; type();
			State = 250; Match(GT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CompileUnitContext : ParserRuleContext {
		public ITerminalNode Eof() { return GetToken(HaCSParser.Eof, 0); }
		public CompileUnitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_compileUnit; } }
		public override void EnterRule(IParseTreeListener listener) {
			IHaCSListener typedListener = listener as IHaCSListener;
			if (typedListener != null) typedListener.EnterCompileUnit(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IHaCSListener typedListener = listener as IHaCSListener;
			if (typedListener != null) typedListener.ExitCompileUnit(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHaCSVisitor<TResult> typedVisitor = visitor as IHaCSVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCompileUnit(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CompileUnitContext compileUnit() {
		CompileUnitContext _localctx = new CompileUnitContext(_ctx, State);
		EnterRule(_localctx, 34, RULE_compileUnit);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 252; Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 12: return expression_sempred((ExpressionContext)_localctx, predIndex);
		}
		return true;
	}
	private bool expression_sempred(ExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(_ctx, 12);

		case 1: return Precpred(_ctx, 11);

		case 2: return Precpred(_ctx, 10);

		case 3: return Precpred(_ctx, 9);

		case 4: return Precpred(_ctx, 8);

		case 5: return Precpred(_ctx, 7);

		case 6: return Precpred(_ctx, 6);

		case 7: return Precpred(_ctx, 5);
		}
		return true;
	}

	public static readonly string _serializedATN =
		"\x3\xAF6F\x8320\x479D\xB75C\x4880\x1605\x191C\xAB37\x3\x35\x101\x4\x2"+
		"\t\x2\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6\x4\a\t\a\x4\b\t\b\x4"+
		"\t\t\t\x4\n\t\n\x4\v\t\v\x4\f\t\f\x4\r\t\r\x4\xE\t\xE\x4\xF\t\xF\x4\x10"+
		"\t\x10\x4\x11\t\x11\x4\x12\t\x12\x4\x13\t\x13\x3\x2\x3\x2\a\x2)\n\x2\f"+
		"\x2\xE\x2,\v\x2\x3\x3\x3\x3\x3\x3\x3\x3\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4"+
		"\x3\x4\a\x4\x38\n\x4\f\x4\xE\x4;\v\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3"+
		"\x4\x3\x4\a\x4\x44\n\x4\f\x4\xE\x4G\v\x4\x3\x4\x3\x4\x3\x4\x3\x4\x5\x4"+
		"M\n\x4\x3\x5\x3\x5\x3\x5\x3\x6\x3\x6\a\x6T\n\x6\f\x6\xE\x6W\v\x6\x3\x6"+
		"\x3\x6\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x5\a\x62\n\a\x3\b\x3\b\x3\b"+
		"\x3\b\x3\b\x3\b\x3\b\x3\t\x3\t\x3\t\x3\t\x3\t\x3\t\x3\t\x3\t\x5\ts\n\t"+
		"\x5\tu\n\t\x3\n\x3\n\x3\n\x3\v\x3\v\x3\v\x3\v\x3\v\x3\v\x3\v\x3\v\x3\v"+
		"\x3\v\x5\v\x84\n\v\x3\f\x3\f\x3\f\x3\f\a\f\x8A\n\f\f\f\xE\f\x8D\v\f\x3"+
		"\f\x3\f\x3\f\x3\f\x3\f\a\f\x94\n\f\f\f\xE\f\x97\v\f\x5\f\x99\n\f\x3\r"+
		"\x3\r\x3\r\x3\xE\x3\xE\x3\xE\x3\xE\x3\xE\x3\xE\x3\xE\x3\xE\x3\xE\x3\xE"+
		"\x3\xE\x3\xE\a\xE\xAA\n\xE\f\xE\xE\xE\xAD\v\xE\x3\xE\x3\xE\x3\xE\x3\xE"+
		"\x3\xE\x5\xE\xB4\n\xE\x3\xE\x3\xE\x3\xE\x3\xE\x3\xE\x5\xE\xBB\n\xE\x3"+
		"\xE\x3\xE\x3\xE\x3\xE\x3\xE\x3\xE\x3\xE\x3\xE\x3\xE\x3\xE\x3\xE\x3\xE"+
		"\x3\xE\x3\xE\x3\xE\x3\xE\x3\xE\x3\xE\x3\xE\x3\xE\x3\xE\x3\xE\x3\xE\x3"+
		"\xE\x3\xE\x3\xE\a\xE\xD7\n\xE\f\xE\xE\xE\xDA\v\xE\x3\xF\x3\xF\x5\xF\xDE"+
		"\n\xF\x3\x10\x3\x10\x3\x11\x3\x11\x3\x11\x5\x11\xE5\n\x11\x3\x11\x3\x11"+
		"\x3\x11\x3\x11\x5\x11\xEB\n\x11\x3\x11\x3\x11\x3\x11\x3\x11\x3\x11\x3"+
		"\x11\x3\x11\x3\x11\x3\x11\x3\x11\x3\x11\x5\x11\xF8\n\x11\x3\x12\x3\x12"+
		"\x3\x12\x3\x12\x3\x12\x3\x13\x3\x13\x3\x13\x2\x2\x3\x1A\x14\x2\x2\x4\x2"+
		"\x6\x2\b\x2\n\x2\f\x2\xE\x2\x10\x2\x12\x2\x14\x2\x16\x2\x18\x2\x1A\x2"+
		"\x1C\x2\x1E\x2 \x2\"\x2$\x2\x2\b\x3\x2\x3\x6\x3\x2\x13\x15\x3\x2\x16\x17"+
		"\x4\x2\x1D\x1F!!\x3\x2\x1B\x1C\x3\x2\a\n\x111\x2&\x3\x2\x2\x2\x4-\x3\x2"+
		"\x2\x2\x6L\x3\x2\x2\x2\bN\x3\x2\x2\x2\nQ\x3\x2\x2\x2\f\x61\x3\x2\x2\x2"+
		"\xE\x63\x3\x2\x2\x2\x10t\x3\x2\x2\x2\x12v\x3\x2\x2\x2\x14\x83\x3\x2\x2"+
		"\x2\x16\x98\x3\x2\x2\x2\x18\x9A\x3\x2\x2\x2\x1A\xBA\x3\x2\x2\x2\x1C\xDD"+
		"\x3\x2\x2\x2\x1E\xDF\x3\x2\x2\x2 \xF7\x3\x2\x2\x2\"\xF9\x3\x2\x2\x2$\xFE"+
		"\x3\x2\x2\x2&*\x5\x4\x3\x2\')\x5\x6\x4\x2(\'\x3\x2\x2\x2),\x3\x2\x2\x2"+
		"*(\x3\x2\x2\x2*+\x3\x2\x2\x2+\x3\x3\x2\x2\x2,*\x3\x2\x2\x2-.\a\a\x2\x2"+
		"./\a\f\x2\x2/\x30\x5\n\x6\x2\x30\x5\x3\x2\x2\x2\x31\x32\x5\x1C\xF\x2\x32"+
		"\x33\a\x11\x2\x2\x33\x34\a%\x2\x2\x34\x39\x5\b\x5\x2\x35\x36\a+\x2\x2"+
		"\x36\x38\x5\b\x5\x2\x37\x35\x3\x2\x2\x2\x38;\x3\x2\x2\x2\x39\x37\x3\x2"+
		"\x2\x2\x39:\x3\x2\x2\x2:<\x3\x2\x2\x2;\x39\x3\x2\x2\x2<=\a&\x2\x2=>\x5"+
		"\n\x6\x2>M\x3\x2\x2\x2?@\a%\x2\x2@\x45\x5\b\x5\x2\x41\x42\a+\x2\x2\x42"+
		"\x44\x5\b\x5\x2\x43\x41\x3\x2\x2\x2\x44G\x3\x2\x2\x2\x45\x43\x3\x2\x2"+
		"\x2\x45\x46\x3\x2\x2\x2\x46H\x3\x2\x2\x2G\x45\x3\x2\x2\x2HI\a&\x2\x2I"+
		"J\a-\x2\x2JK\x5\n\x6\x2KM\x3\x2\x2\x2L\x31\x3\x2\x2\x2L?\x3\x2\x2\x2M"+
		"\a\x3\x2\x2\x2NO\x5\x1C\xF\x2OP\a\x11\x2\x2P\t\x3\x2\x2\x2QU\a)\x2\x2"+
		"RT\x5\f\a\x2SR\x3\x2\x2\x2TW\x3\x2\x2\x2US\x3\x2\x2\x2UV\x3\x2\x2\x2V"+
		"X\x3\x2\x2\x2WU\x3\x2\x2\x2XY\a*\x2\x2Y\v\x3\x2\x2\x2Z\x62\x5\xE\b\x2"+
		"[\\\x5\x14\v\x2\\]\a,\x2\x2]\x62\x3\x2\x2\x2^_\x5\x18\r\x2_`\a,\x2\x2"+
		"`\x62\x3\x2\x2\x2\x61Z\x3\x2\x2\x2\x61[\x3\x2\x2\x2\x61^\x3\x2\x2\x2\x62"+
		"\r\x3\x2\x2\x2\x63\x64\a\r\x2\x2\x64\x65\a%\x2\x2\x65\x66\x5\x1A\xE\x2"+
		"\x66g\a&\x2\x2gh\x5\n\x6\x2hi\x5\x10\t\x2i\xF\x3\x2\x2\x2jk\a\xE\x2\x2"+
		"kl\a%\x2\x2lm\x5\x1A\xE\x2mn\a&\x2\x2no\x5\n\x6\x2op\x5\x10\t\x2pu\x3"+
		"\x2\x2\x2qs\x5\x12\n\x2rq\x3\x2\x2\x2rs\x3\x2\x2\x2su\x3\x2\x2\x2tj\x3"+
		"\x2\x2\x2tr\x3\x2\x2\x2u\x11\x3\x2\x2\x2vw\a\xF\x2\x2wx\x5\n\x6\x2x\x13"+
		"\x3\x2\x2\x2yz\x5\x1E\x10\x2z{\a\x11\x2\x2{|\a$\x2\x2|}\x5\x1A\xE\x2}"+
		"\x84\x3\x2\x2\x2~\x7F\x5\"\x12\x2\x7F\x80\a\x11\x2\x2\x80\x81\a$\x2\x2"+
		"\x81\x82\x5\x16\f\x2\x82\x84\x3\x2\x2\x2\x83y\x3\x2\x2\x2\x83~\x3\x2\x2"+
		"\x2\x84\x15\x3\x2\x2\x2\x85\x86\a)\x2\x2\x86\x8B\x5\x16\f\x2\x87\x88\a"+
		"+\x2\x2\x88\x8A\x5\x16\f\x2\x89\x87\x3\x2\x2\x2\x8A\x8D\x3\x2\x2\x2\x8B"+
		"\x89\x3\x2\x2\x2\x8B\x8C\x3\x2\x2\x2\x8C\x8E\x3\x2\x2\x2\x8D\x8B\x3\x2"+
		"\x2\x2\x8E\x8F\a*\x2\x2\x8F\x99\x3\x2\x2\x2\x90\x95\x5\x1A\xE\x2\x91\x92"+
		"\a+\x2\x2\x92\x94\x5\x1A\xE\x2\x93\x91\x3\x2\x2\x2\x94\x97\x3\x2\x2\x2"+
		"\x95\x93\x3\x2\x2\x2\x95\x96\x3\x2\x2\x2\x96\x99\x3\x2\x2\x2\x97\x95\x3"+
		"\x2\x2\x2\x98\x85\x3\x2\x2\x2\x98\x90\x3\x2\x2\x2\x99\x17\x3\x2\x2\x2"+
		"\x9A\x9B\a\x10\x2\x2\x9B\x9C\x5\x1A\xE\x2\x9C\x19\x3\x2\x2\x2\x9D\x9E"+
		"\b\xE\x1\x2\x9E\x9F\a%\x2\x2\x9F\xA0\x5\x1A\xE\x2\xA0\xA1\a&\x2\x2\xA1"+
		"\xBB\x3\x2\x2\x2\xA2\xA3\a#\x2\x2\xA3\xBB\x5\x1A\xE\xF\xA4\xA5\a\x11\x2"+
		"\x2\xA5\xA6\a%\x2\x2\xA6\xAB\x5\x1A\xE\x2\xA7\xA8\a+\x2\x2\xA8\xAA\x5"+
		"\x1A\xE\x2\xA9\xA7\x3\x2\x2\x2\xAA\xAD\x3\x2\x2\x2\xAB\xA9\x3\x2\x2\x2"+
		"\xAB\xAC\x3\x2\x2\x2\xAC\xAE\x3\x2\x2\x2\xAD\xAB\x3\x2\x2\x2\xAE\xAF\a"+
		"&\x2\x2\xAF\xBB\x3\x2\x2\x2\xB0\xBB\t\x2\x2\x2\xB1\xB3\a\x11\x2\x2\xB2"+
		"\xB4\x5 \x11\x2\xB3\xB2\x3\x2\x2\x2\xB3\xB4\x3\x2\x2\x2\xB4\xBB\x3\x2"+
		"\x2\x2\xB5\xB6\a\'\x2\x2\xB6\xB7\a\x11\x2\x2\xB7\xB8\a \x2\x2\xB8\xB9"+
		"\a\x11\x2\x2\xB9\xBB\a(\x2\x2\xBA\x9D\x3\x2\x2\x2\xBA\xA2\x3\x2\x2\x2"+
		"\xBA\xA4\x3\x2\x2\x2\xBA\xB0\x3\x2\x2\x2\xBA\xB1\x3\x2\x2\x2\xBA\xB5\x3"+
		"\x2\x2\x2\xBB\xD8\x3\x2\x2\x2\xBC\xBD\f\xE\x2\x2\xBD\xBE\a\x12\x2\x2\xBE"+
		"\xD7\x5\x1A\xE\xF\xBF\xC0\f\r\x2\x2\xC0\xC1\t\x3\x2\x2\xC1\xD7\x5\x1A"+
		"\xE\xE\xC2\xC3\f\f\x2\x2\xC3\xC4\t\x4\x2\x2\xC4\xD7\x5\x1A\xE\r\xC5\xC6"+
		"\f\v\x2\x2\xC6\xC7\t\x5\x2\x2\xC7\xD7\x5\x1A\xE\f\xC8\xC9\f\n\x2\x2\xC9"+
		"\xCA\t\x6\x2\x2\xCA\xD7\x5\x1A\xE\v\xCB\xCC\f\t\x2\x2\xCC\xCD\a\x1A\x2"+
		"\x2\xCD\xCE\a\x11\x2\x2\xCE\xCF\a\"\x2\x2\xCF\xD7\x5\x1A\xE\n\xD0\xD1"+
		"\f\b\x2\x2\xD1\xD2\a\x18\x2\x2\xD2\xD7\x5\x1A\xE\t\xD3\xD4\f\a\x2\x2\xD4"+
		"\xD5\a\x19\x2\x2\xD5\xD7\x5\x1A\xE\b\xD6\xBC\x3\x2\x2\x2\xD6\xBF\x3\x2"+
		"\x2\x2\xD6\xC2\x3\x2\x2\x2\xD6\xC5\x3\x2\x2\x2\xD6\xC8\x3\x2\x2\x2\xD6"+
		"\xCB\x3\x2\x2\x2\xD6\xD0\x3\x2\x2\x2\xD6\xD3\x3\x2\x2\x2\xD7\xDA\x3\x2"+
		"\x2\x2\xD8\xD6\x3\x2\x2\x2\xD8\xD9\x3\x2\x2\x2\xD9\x1B\x3\x2\x2\x2\xDA"+
		"\xD8\x3\x2\x2\x2\xDB\xDE\x5\x1E\x10\x2\xDC\xDE\x5\"\x12\x2\xDD\xDB\x3"+
		"\x2\x2\x2\xDD\xDC\x3\x2\x2\x2\xDE\x1D\x3\x2\x2\x2\xDF\xE0\t\a\x2\x2\xE0"+
		"\x1F\x3\x2\x2\x2\xE1\xE2\a.\x2\x2\xE2\xE4\a%\x2\x2\xE3\xE5\x5\x1A\xE\x2"+
		"\xE4\xE3\x3\x2\x2\x2\xE4\xE5\x3\x2\x2\x2\xE5\xE6\x3\x2\x2\x2\xE6\xF8\a"+
		"&\x2\x2\xE7\xE8\a\x32\x2\x2\xE8\xEA\a%\x2\x2\xE9\xEB\x5\x1A\xE\x2\xEA"+
		"\xE9\x3\x2\x2\x2\xEA\xEB\x3\x2\x2\x2\xEB\xEC\x3\x2\x2\x2\xEC\xF8\a&\x2"+
		"\x2\xED\xEE\a\x33\x2\x2\xEE\xEF\a%\x2\x2\xEF\xF8\a&\x2\x2\xF0\xF1\a\x34"+
		"\x2\x2\xF1\xF2\a%\x2\x2\xF2\xF8\a&\x2\x2\xF3\xF4\a\x35\x2\x2\xF4\xF5\a"+
		"%\x2\x2\xF5\xF6\a\x11\x2\x2\xF6\xF8\a&\x2\x2\xF7\xE1\x3\x2\x2\x2\xF7\xE7"+
		"\x3\x2\x2\x2\xF7\xED\x3\x2\x2\x2\xF7\xF0\x3\x2\x2\x2\xF7\xF3\x3\x2\x2"+
		"\x2\xF8!\x3\x2\x2\x2\xF9\xFA\a\v\x2\x2\xFA\xFB\a\x1F\x2\x2\xFB\xFC\x5"+
		"\x1C\xF\x2\xFC\xFD\a\x1D\x2\x2\xFD#\x3\x2\x2\x2\xFE\xFF\a\x2\x2\x3\xFF"+
		"%\x3\x2\x2\x2\x17*\x39\x45LU\x61rt\x83\x8B\x95\x98\xAB\xB3\xBA\xD6\xD8"+
		"\xDD\xE4\xEA\xF7";
	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
} // namespace HaCS
