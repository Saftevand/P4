//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.5.3
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:\Users\Patrick\Documents\P4\HaCS\HaCS\HaCS.g4 by ANTLR 4.5.3

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace HaCS {
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using System.Collections.Generic;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.5.3")]
[System.CLSCompliant(false)]
public partial class HaCSParser : Parser {
	public const int
		INT=1, FLOAT=2, CHAR=3, BOOL=4, INT_Type=5, FLOAT_Type=6, CHAR_Type=7, 
		BOOL_Type=8, LIST=9, MAIN=10, IF=11, ELSEIF=12, ELSE=13, RETURN=14, FIND=15, 
		WHERE=16, FIRST=17, LAST=18, MAP=19, REDUCE=20, FOLD=21, WRITELINE=22, 
		INCLUDE=23, EXCLUDE=24, EXCLUDEAT=25, IDENTIFIER=26, EXP=27, MUL=28, DIV=29, 
		MOD=30, ADD=31, SUB=32, AND=33, OR=34, PIPE=35, EQ=36, NEQ=37, GT=38, 
		GE=39, LT=40, DOT=41, LE=42, LTMINUS=43, NEGATE=44, ASSIGN=45, LPAREN=46, 
		RPAREN=47, LBRACKET=48, RBRACKET=49, LCURLBRACKET=50, RCURLBRACKET=51, 
		DELIMITER=52, EOS=53, LAMBDA=54, WS=55, COMMENT=56, LINE_COMMENT=57, CONTAINS=58, 
		LENGTH=59;
	public const int
		RULE_program = 0, RULE_main = 1, RULE_functionDecl = 2, RULE_formalParam = 3, 
		RULE_body = 4, RULE_ifbody = 5, RULE_stmt = 6, RULE_printStmt = 7, RULE_ifStmt = 8, 
		RULE_elseifStmt = 9, RULE_elseStmt = 10, RULE_varDcl = 11, RULE_listDcl = 12, 
		RULE_listDcls = 13, RULE_returnStmt = 14, RULE_expression = 15, RULE_lambdaExp = 16, 
		RULE_lambdaBody = 17, RULE_listOpp = 18, RULE_type = 19, RULE_primitiveType = 20, 
		RULE_listType = 21, RULE_compileUnit = 22;
	public static readonly string[] ruleNames = {
		"program", "main", "functionDecl", "formalParam", "body", "ifbody", "stmt", 
		"printStmt", "ifStmt", "elseifStmt", "elseStmt", "varDcl", "listDcl", 
		"listDcls", "returnStmt", "expression", "lambdaExp", "lambdaBody", "listOpp", 
		"type", "primitiveType", "listType", "compileUnit"
	};

	private static readonly string[] _LiteralNames = {
		null, null, null, null, null, "'int'", "'float'", "'char'", "'bool'", 
		"'List'", "'main'", "'if'", "'elseif'", "'else'", "'return'", "'find'", 
		"'where'", "'first'", "'last'", "'map'", "'reduce'", "'fold'", "'WriteLine'", 
		"'include'", "'exclude'", "'excludeAt'", null, "'^'", "'*'", "'/'", "'%'", 
		"'+'", "'-'", "'&&'", "'||'", "'|'", "'=='", "'!='", "'>'", "'>='", "'<'", 
		"'.'", "'<='", "'<-'", "'!'", "'='", "'('", "')'", "'['", "']'", "'{'", 
		"'}'", "','", "';'", "'=>'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "INT", "FLOAT", "CHAR", "BOOL", "INT_Type", "FLOAT_Type", "CHAR_Type", 
		"BOOL_Type", "LIST", "MAIN", "IF", "ELSEIF", "ELSE", "RETURN", "FIND", 
		"WHERE", "FIRST", "LAST", "MAP", "REDUCE", "FOLD", "WRITELINE", "INCLUDE", 
		"EXCLUDE", "EXCLUDEAT", "IDENTIFIER", "EXP", "MUL", "DIV", "MOD", "ADD", 
		"SUB", "AND", "OR", "PIPE", "EQ", "NEQ", "GT", "GE", "LT", "DOT", "LE", 
		"LTMINUS", "NEGATE", "ASSIGN", "LPAREN", "RPAREN", "LBRACKET", "RBRACKET", 
		"LCURLBRACKET", "RCURLBRACKET", "DELIMITER", "EOS", "LAMBDA", "WS", "COMMENT", 
		"LINE_COMMENT", "CONTAINS", "LENGTH"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[System.Obsolete("Use Vocabulary instead.")]
	public static readonly string[] tokenNames = GenerateTokenNames(DefaultVocabulary, _SymbolicNames.Length);

	private static string[] GenerateTokenNames(IVocabulary vocabulary, int length) {
		string[] tokenNames = new string[length];
		for (int i = 0; i < tokenNames.Length; i++) {
			tokenNames[i] = vocabulary.GetLiteralName(i);
			if (tokenNames[i] == null) {
				tokenNames[i] = vocabulary.GetSymbolicName(i);
			}

			if (tokenNames[i] == null) {
				tokenNames[i] = "<INVALID>";
			}
		}

		return tokenNames;
	}

	[System.Obsolete]
	public override string[] TokenNames
	{
		get
		{
			return tokenNames;
		}
	}

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "HaCS.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }


		protected const int EOF = Eof;

	public HaCSParser(ITokenStream input)
		: base(input)
	{
		_interp = new ParserATNSimulator(this,_ATN);
	}
	public partial class ProgramContext : ParserRuleContext {
		public MainContext main() {
			return GetRuleContext<MainContext>(0);
		}
		public FunctionDeclContext[] functionDecl() {
			return GetRuleContexts<FunctionDeclContext>();
		}
		public FunctionDeclContext functionDecl(int i) {
			return GetRuleContext<FunctionDeclContext>(i);
		}
		public ProgramContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_program; } }
		public override void EnterRule(IParseTreeListener listener) {
			IHaCSListener typedListener = listener as IHaCSListener;
			if (typedListener != null) typedListener.EnterProgram(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IHaCSListener typedListener = listener as IHaCSListener;
			if (typedListener != null) typedListener.ExitProgram(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHaCSVisitor<TResult> typedVisitor = visitor as IHaCSVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProgram(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProgramContext program() {
		ProgramContext _localctx = new ProgramContext(_ctx, State);
		EnterRule(_localctx, 0, RULE_program);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 46; main();
			State = 50;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << INT_Type) | (1L << FLOAT_Type) | (1L << CHAR_Type) | (1L << BOOL_Type) | (1L << LIST))) != 0)) {
				{
				{
				State = 47; functionDecl();
				}
				}
				State = 52;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MainContext : ParserRuleContext {
		public ITerminalNode INT_Type() { return GetToken(HaCSParser.INT_Type, 0); }
		public ITerminalNode MAIN() { return GetToken(HaCSParser.MAIN, 0); }
		public BodyContext body() {
			return GetRuleContext<BodyContext>(0);
		}
		public MainContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_main; } }
		public override void EnterRule(IParseTreeListener listener) {
			IHaCSListener typedListener = listener as IHaCSListener;
			if (typedListener != null) typedListener.EnterMain(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IHaCSListener typedListener = listener as IHaCSListener;
			if (typedListener != null) typedListener.ExitMain(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHaCSVisitor<TResult> typedVisitor = visitor as IHaCSVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMain(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MainContext main() {
		MainContext _localctx = new MainContext(_ctx, State);
		EnterRule(_localctx, 2, RULE_main);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 53; Match(INT_Type);
			State = 54; Match(MAIN);
			State = 55; body();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionDeclContext : ParserRuleContext {
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public ITerminalNode IDENTIFIER() { return GetToken(HaCSParser.IDENTIFIER, 0); }
		public ITerminalNode LPAREN() { return GetToken(HaCSParser.LPAREN, 0); }
		public FormalParamContext[] formalParam() {
			return GetRuleContexts<FormalParamContext>();
		}
		public FormalParamContext formalParam(int i) {
			return GetRuleContext<FormalParamContext>(i);
		}
		public ITerminalNode RPAREN() { return GetToken(HaCSParser.RPAREN, 0); }
		public BodyContext body() {
			return GetRuleContext<BodyContext>(0);
		}
		public ITerminalNode[] DELIMITER() { return GetTokens(HaCSParser.DELIMITER); }
		public ITerminalNode DELIMITER(int i) {
			return GetToken(HaCSParser.DELIMITER, i);
		}
		public FunctionDeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionDecl; } }
		public override void EnterRule(IParseTreeListener listener) {
			IHaCSListener typedListener = listener as IHaCSListener;
			if (typedListener != null) typedListener.EnterFunctionDecl(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IHaCSListener typedListener = listener as IHaCSListener;
			if (typedListener != null) typedListener.ExitFunctionDecl(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHaCSVisitor<TResult> typedVisitor = visitor as IHaCSVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionDecl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionDeclContext functionDecl() {
		FunctionDeclContext _localctx = new FunctionDeclContext(_ctx, State);
		EnterRule(_localctx, 4, RULE_functionDecl);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 57; type();
			State = 58; Match(IDENTIFIER);
			State = 59; Match(LPAREN);
			State = 60; formalParam();
			State = 65;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==DELIMITER) {
				{
				{
				State = 61; Match(DELIMITER);
				State = 62; formalParam();
				}
				}
				State = 67;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 68; Match(RPAREN);
			State = 69; body();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FormalParamContext : ParserRuleContext {
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public ITerminalNode IDENTIFIER() { return GetToken(HaCSParser.IDENTIFIER, 0); }
		public FormalParamContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_formalParam; } }
		public override void EnterRule(IParseTreeListener listener) {
			IHaCSListener typedListener = listener as IHaCSListener;
			if (typedListener != null) typedListener.EnterFormalParam(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IHaCSListener typedListener = listener as IHaCSListener;
			if (typedListener != null) typedListener.ExitFormalParam(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHaCSVisitor<TResult> typedVisitor = visitor as IHaCSVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFormalParam(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FormalParamContext formalParam() {
		FormalParamContext _localctx = new FormalParamContext(_ctx, State);
		EnterRule(_localctx, 6, RULE_formalParam);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 71; type();
			State = 72; Match(IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BodyContext : ParserRuleContext {
		public ITerminalNode LCURLBRACKET() { return GetToken(HaCSParser.LCURLBRACKET, 0); }
		public ReturnStmtContext returnStmt() {
			return GetRuleContext<ReturnStmtContext>(0);
		}
		public ITerminalNode RCURLBRACKET() { return GetToken(HaCSParser.RCURLBRACKET, 0); }
		public StmtContext[] stmt() {
			return GetRuleContexts<StmtContext>();
		}
		public StmtContext stmt(int i) {
			return GetRuleContext<StmtContext>(i);
		}
		public BodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_body; } }
		public override void EnterRule(IParseTreeListener listener) {
			IHaCSListener typedListener = listener as IHaCSListener;
			if (typedListener != null) typedListener.EnterBody(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IHaCSListener typedListener = listener as IHaCSListener;
			if (typedListener != null) typedListener.ExitBody(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHaCSVisitor<TResult> typedVisitor = visitor as IHaCSVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBody(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BodyContext body() {
		BodyContext _localctx = new BodyContext(_ctx, State);
		EnterRule(_localctx, 8, RULE_body);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 74; Match(LCURLBRACKET);
			State = 78;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,2,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 75; stmt();
					}
					} 
				}
				State = 80;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,2,_ctx);
			}
			State = 81; returnStmt();
			State = 82; Match(RCURLBRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfbodyContext : ParserRuleContext {
		public ITerminalNode LCURLBRACKET() { return GetToken(HaCSParser.LCURLBRACKET, 0); }
		public ITerminalNode RCURLBRACKET() { return GetToken(HaCSParser.RCURLBRACKET, 0); }
		public StmtContext[] stmt() {
			return GetRuleContexts<StmtContext>();
		}
		public StmtContext stmt(int i) {
			return GetRuleContext<StmtContext>(i);
		}
		public IfbodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifbody; } }
		public override void EnterRule(IParseTreeListener listener) {
			IHaCSListener typedListener = listener as IHaCSListener;
			if (typedListener != null) typedListener.EnterIfbody(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IHaCSListener typedListener = listener as IHaCSListener;
			if (typedListener != null) typedListener.ExitIfbody(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHaCSVisitor<TResult> typedVisitor = visitor as IHaCSVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfbody(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IfbodyContext ifbody() {
		IfbodyContext _localctx = new IfbodyContext(_ctx, State);
		EnterRule(_localctx, 10, RULE_ifbody);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 84; Match(LCURLBRACKET);
			State = 88;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << INT_Type) | (1L << FLOAT_Type) | (1L << CHAR_Type) | (1L << BOOL_Type) | (1L << LIST) | (1L << IF) | (1L << RETURN) | (1L << WRITELINE))) != 0)) {
				{
				{
				State = 85; stmt();
				}
				}
				State = 90;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 91; Match(RCURLBRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StmtContext : ParserRuleContext {
		public IfStmtContext ifStmt() {
			return GetRuleContext<IfStmtContext>(0);
		}
		public VarDclContext varDcl() {
			return GetRuleContext<VarDclContext>(0);
		}
		public ITerminalNode EOS() { return GetToken(HaCSParser.EOS, 0); }
		public PrintStmtContext printStmt() {
			return GetRuleContext<PrintStmtContext>(0);
		}
		public ReturnStmtContext returnStmt() {
			return GetRuleContext<ReturnStmtContext>(0);
		}
		public StmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IHaCSListener typedListener = listener as IHaCSListener;
			if (typedListener != null) typedListener.EnterStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IHaCSListener typedListener = listener as IHaCSListener;
			if (typedListener != null) typedListener.ExitStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHaCSVisitor<TResult> typedVisitor = visitor as IHaCSVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StmtContext stmt() {
		StmtContext _localctx = new StmtContext(_ctx, State);
		EnterRule(_localctx, 12, RULE_stmt);
		try {
			State = 103;
			switch (_input.La(1)) {
			case IF:
				EnterOuterAlt(_localctx, 1);
				{
				State = 93; ifStmt();
				}
				break;
			case INT_Type:
			case FLOAT_Type:
			case CHAR_Type:
			case BOOL_Type:
			case LIST:
				EnterOuterAlt(_localctx, 2);
				{
				State = 94; varDcl();
				State = 95; Match(EOS);
				}
				break;
			case WRITELINE:
				EnterOuterAlt(_localctx, 3);
				{
				State = 97; printStmt();
				State = 98; Match(EOS);
				}
				break;
			case RETURN:
				EnterOuterAlt(_localctx, 4);
				{
				State = 100; returnStmt();
				State = 101; Match(EOS);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrintStmtContext : ParserRuleContext {
		public ITerminalNode WRITELINE() { return GetToken(HaCSParser.WRITELINE, 0); }
		public ITerminalNode LPAREN() { return GetToken(HaCSParser.LPAREN, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode RPAREN() { return GetToken(HaCSParser.RPAREN, 0); }
		public ITerminalNode[] DELIMITER() { return GetTokens(HaCSParser.DELIMITER); }
		public ITerminalNode DELIMITER(int i) {
			return GetToken(HaCSParser.DELIMITER, i);
		}
		public PrintStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_printStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IHaCSListener typedListener = listener as IHaCSListener;
			if (typedListener != null) typedListener.EnterPrintStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IHaCSListener typedListener = listener as IHaCSListener;
			if (typedListener != null) typedListener.ExitPrintStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHaCSVisitor<TResult> typedVisitor = visitor as IHaCSVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrintStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrintStmtContext printStmt() {
		PrintStmtContext _localctx = new PrintStmtContext(_ctx, State);
		EnterRule(_localctx, 14, RULE_printStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 105; Match(WRITELINE);
			State = 106; Match(LPAREN);
			State = 107; expression(0);
			State = 112;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==DELIMITER) {
				{
				{
				State = 108; Match(DELIMITER);
				State = 109; expression(0);
				}
				}
				State = 114;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 115; Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfStmtContext : ParserRuleContext {
		public ExpressionContext exp1;
		public ITerminalNode IF() { return GetToken(HaCSParser.IF, 0); }
		public ITerminalNode LPAREN() { return GetToken(HaCSParser.LPAREN, 0); }
		public ITerminalNode RPAREN() { return GetToken(HaCSParser.RPAREN, 0); }
		public IfbodyContext ifbody() {
			return GetRuleContext<IfbodyContext>(0);
		}
		public ElseifStmtContext elseifStmt() {
			return GetRuleContext<ElseifStmtContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public IfStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IHaCSListener typedListener = listener as IHaCSListener;
			if (typedListener != null) typedListener.EnterIfStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IHaCSListener typedListener = listener as IHaCSListener;
			if (typedListener != null) typedListener.ExitIfStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHaCSVisitor<TResult> typedVisitor = visitor as IHaCSVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IfStmtContext ifStmt() {
		IfStmtContext _localctx = new IfStmtContext(_ctx, State);
		EnterRule(_localctx, 16, RULE_ifStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 117; Match(IF);
			State = 118; Match(LPAREN);
			State = 119; _localctx.exp1 = expression(0);
			State = 120; Match(RPAREN);
			State = 121; ifbody();
			State = 122; elseifStmt();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ElseifStmtContext : ParserRuleContext {
		public ExpressionContext exp2;
		public ITerminalNode ELSEIF() { return GetToken(HaCSParser.ELSEIF, 0); }
		public ITerminalNode LPAREN() { return GetToken(HaCSParser.LPAREN, 0); }
		public ITerminalNode RPAREN() { return GetToken(HaCSParser.RPAREN, 0); }
		public IfbodyContext ifbody() {
			return GetRuleContext<IfbodyContext>(0);
		}
		public ElseifStmtContext elseifStmt() {
			return GetRuleContext<ElseifStmtContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ElseStmtContext elseStmt() {
			return GetRuleContext<ElseStmtContext>(0);
		}
		public ElseifStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_elseifStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IHaCSListener typedListener = listener as IHaCSListener;
			if (typedListener != null) typedListener.EnterElseifStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IHaCSListener typedListener = listener as IHaCSListener;
			if (typedListener != null) typedListener.ExitElseifStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHaCSVisitor<TResult> typedVisitor = visitor as IHaCSVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElseifStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ElseifStmtContext elseifStmt() {
		ElseifStmtContext _localctx = new ElseifStmtContext(_ctx, State);
		EnterRule(_localctx, 18, RULE_elseifStmt);
		int _la;
		try {
			State = 134;
			switch (_input.La(1)) {
			case ELSEIF:
				EnterOuterAlt(_localctx, 1);
				{
				State = 124; Match(ELSEIF);
				State = 125; Match(LPAREN);
				State = 126; _localctx.exp2 = expression(0);
				State = 127; Match(RPAREN);
				State = 128; ifbody();
				State = 129; elseifStmt();
				}
				break;
			case INT_Type:
			case FLOAT_Type:
			case CHAR_Type:
			case BOOL_Type:
			case LIST:
			case IF:
			case ELSE:
			case RETURN:
			case WRITELINE:
			case RCURLBRACKET:
				EnterOuterAlt(_localctx, 2);
				{
				State = 132;
				_la = _input.La(1);
				if (_la==ELSE) {
					{
					State = 131; elseStmt();
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ElseStmtContext : ParserRuleContext {
		public ITerminalNode ELSE() { return GetToken(HaCSParser.ELSE, 0); }
		public IfbodyContext ifbody() {
			return GetRuleContext<IfbodyContext>(0);
		}
		public ElseStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_elseStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IHaCSListener typedListener = listener as IHaCSListener;
			if (typedListener != null) typedListener.EnterElseStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IHaCSListener typedListener = listener as IHaCSListener;
			if (typedListener != null) typedListener.ExitElseStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHaCSVisitor<TResult> typedVisitor = visitor as IHaCSVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElseStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ElseStmtContext elseStmt() {
		ElseStmtContext _localctx = new ElseStmtContext(_ctx, State);
		EnterRule(_localctx, 20, RULE_elseStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 136; Match(ELSE);
			State = 137; ifbody();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VarDclContext : ParserRuleContext {
		public PrimitiveTypeContext left;
		public ExpressionContext right;
		public ITerminalNode IDENTIFIER() { return GetToken(HaCSParser.IDENTIFIER, 0); }
		public ITerminalNode ASSIGN() { return GetToken(HaCSParser.ASSIGN, 0); }
		public PrimitiveTypeContext primitiveType() {
			return GetRuleContext<PrimitiveTypeContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ListDclContext listDcl() {
			return GetRuleContext<ListDclContext>(0);
		}
		public VarDclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_varDcl; } }
		public override void EnterRule(IParseTreeListener listener) {
			IHaCSListener typedListener = listener as IHaCSListener;
			if (typedListener != null) typedListener.EnterVarDcl(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IHaCSListener typedListener = listener as IHaCSListener;
			if (typedListener != null) typedListener.ExitVarDcl(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHaCSVisitor<TResult> typedVisitor = visitor as IHaCSVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVarDcl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VarDclContext varDcl() {
		VarDclContext _localctx = new VarDclContext(_ctx, State);
		EnterRule(_localctx, 22, RULE_varDcl);
		try {
			State = 145;
			switch (_input.La(1)) {
			case INT_Type:
			case FLOAT_Type:
			case CHAR_Type:
			case BOOL_Type:
				EnterOuterAlt(_localctx, 1);
				{
				State = 139; _localctx.left = primitiveType();
				State = 140; Match(IDENTIFIER);
				State = 141; Match(ASSIGN);
				State = 142; _localctx.right = expression(0);
				}
				break;
			case LIST:
				EnterOuterAlt(_localctx, 2);
				{
				State = 144; listDcl();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ListDclContext : ParserRuleContext {
		public ListTypeContext listType() {
			return GetRuleContext<ListTypeContext>(0);
		}
		public ITerminalNode IDENTIFIER() { return GetToken(HaCSParser.IDENTIFIER, 0); }
		public ITerminalNode ASSIGN() { return GetToken(HaCSParser.ASSIGN, 0); }
		public ITerminalNode LCURLBRACKET() { return GetToken(HaCSParser.LCURLBRACKET, 0); }
		public ListDclsContext listDcls() {
			return GetRuleContext<ListDclsContext>(0);
		}
		public ITerminalNode RCURLBRACKET() { return GetToken(HaCSParser.RCURLBRACKET, 0); }
		public ListDclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_listDcl; } }
		public override void EnterRule(IParseTreeListener listener) {
			IHaCSListener typedListener = listener as IHaCSListener;
			if (typedListener != null) typedListener.EnterListDcl(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IHaCSListener typedListener = listener as IHaCSListener;
			if (typedListener != null) typedListener.ExitListDcl(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHaCSVisitor<TResult> typedVisitor = visitor as IHaCSVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitListDcl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ListDclContext listDcl() {
		ListDclContext _localctx = new ListDclContext(_ctx, State);
		EnterRule(_localctx, 24, RULE_listDcl);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 147; listType();
			State = 148; Match(IDENTIFIER);
			State = 149; Match(ASSIGN);
			State = 150; Match(LCURLBRACKET);
			State = 151; listDcls();
			State = 152; Match(RCURLBRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ListDclsContext : ParserRuleContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode[] DELIMITER() { return GetTokens(HaCSParser.DELIMITER); }
		public ITerminalNode DELIMITER(int i) {
			return GetToken(HaCSParser.DELIMITER, i);
		}
		public ITerminalNode[] LCURLBRACKET() { return GetTokens(HaCSParser.LCURLBRACKET); }
		public ITerminalNode LCURLBRACKET(int i) {
			return GetToken(HaCSParser.LCURLBRACKET, i);
		}
		public ListDclsContext[] listDcls() {
			return GetRuleContexts<ListDclsContext>();
		}
		public ListDclsContext listDcls(int i) {
			return GetRuleContext<ListDclsContext>(i);
		}
		public ITerminalNode[] RCURLBRACKET() { return GetTokens(HaCSParser.RCURLBRACKET); }
		public ITerminalNode RCURLBRACKET(int i) {
			return GetToken(HaCSParser.RCURLBRACKET, i);
		}
		public ListDclsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_listDcls; } }
		public override void EnterRule(IParseTreeListener listener) {
			IHaCSListener typedListener = listener as IHaCSListener;
			if (typedListener != null) typedListener.EnterListDcls(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IHaCSListener typedListener = listener as IHaCSListener;
			if (typedListener != null) typedListener.ExitListDcls(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHaCSVisitor<TResult> typedVisitor = visitor as IHaCSVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitListDcls(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ListDclsContext listDcls() {
		ListDclsContext _localctx = new ListDclsContext(_ctx, State);
		EnterRule(_localctx, 26, RULE_listDcls);
		int _la;
		try {
			State = 175;
			switch (_input.La(1)) {
			case INT:
			case FLOAT:
			case CHAR:
			case BOOL:
			case IDENTIFIER:
			case NEGATE:
			case LPAREN:
				EnterOuterAlt(_localctx, 1);
				{
				State = 154; expression(0);
				State = 159;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==DELIMITER) {
					{
					{
					State = 155; Match(DELIMITER);
					State = 156; expression(0);
					}
					}
					State = 161;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				}
				break;
			case LCURLBRACKET:
				EnterOuterAlt(_localctx, 2);
				{
				State = 162; Match(LCURLBRACKET);
				State = 163; listDcls();
				State = 164; Match(RCURLBRACKET);
				State = 172;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==DELIMITER) {
					{
					{
					State = 165; Match(DELIMITER);
					State = 166; Match(LCURLBRACKET);
					State = 167; listDcls();
					State = 168; Match(RCURLBRACKET);
					}
					}
					State = 174;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReturnStmtContext : ParserRuleContext {
		public ITerminalNode RETURN() { return GetToken(HaCSParser.RETURN, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ReturnStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_returnStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IHaCSListener typedListener = listener as IHaCSListener;
			if (typedListener != null) typedListener.EnterReturnStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IHaCSListener typedListener = listener as IHaCSListener;
			if (typedListener != null) typedListener.ExitReturnStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHaCSVisitor<TResult> typedVisitor = visitor as IHaCSVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReturnStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ReturnStmtContext returnStmt() {
		ReturnStmtContext _localctx = new ReturnStmtContext(_ctx, State);
		EnterRule(_localctx, 28, RULE_returnStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 177; Match(RETURN);
			State = 178; expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
	 
		public ExpressionContext() { }
		public virtual void CopyFrom(ExpressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class OrContext : ExpressionContext {
		public ExpressionContext left;
		public ExpressionContext right;
		public ITerminalNode OR() { return GetToken(HaCSParser.OR, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public OrContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IHaCSListener typedListener = listener as IHaCSListener;
			if (typedListener != null) typedListener.EnterOr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IHaCSListener typedListener = listener as IHaCSListener;
			if (typedListener != null) typedListener.ExitOr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHaCSVisitor<TResult> typedVisitor = visitor as IHaCSVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExponentContext : ExpressionContext {
		public ExpressionContext left;
		public ExpressionContext right;
		public ITerminalNode EXP() { return GetToken(HaCSParser.EXP, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ExponentContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IHaCSListener typedListener = listener as IHaCSListener;
			if (typedListener != null) typedListener.EnterExponent(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IHaCSListener typedListener = listener as IHaCSListener;
			if (typedListener != null) typedListener.ExitExponent(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHaCSVisitor<TResult> typedVisitor = visitor as IHaCSVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExponent(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Arith2Context : ExpressionContext {
		public ExpressionContext left;
		public ExpressionContext right;
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode MUL() { return GetToken(HaCSParser.MUL, 0); }
		public ITerminalNode DIV() { return GetToken(HaCSParser.DIV, 0); }
		public ITerminalNode MOD() { return GetToken(HaCSParser.MOD, 0); }
		public Arith2Context(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IHaCSListener typedListener = listener as IHaCSListener;
			if (typedListener != null) typedListener.EnterArith2(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IHaCSListener typedListener = listener as IHaCSListener;
			if (typedListener != null) typedListener.ExitArith2(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHaCSVisitor<TResult> typedVisitor = visitor as IHaCSVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArith2(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class FuncContext : ExpressionContext {
		public ExpressionContext exp;
		public ExpressionContext expList;
		public ITerminalNode IDENTIFIER() { return GetToken(HaCSParser.IDENTIFIER, 0); }
		public ITerminalNode LPAREN() { return GetToken(HaCSParser.LPAREN, 0); }
		public ITerminalNode RPAREN() { return GetToken(HaCSParser.RPAREN, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode[] DELIMITER() { return GetTokens(HaCSParser.DELIMITER); }
		public ITerminalNode DELIMITER(int i) {
			return GetToken(HaCSParser.DELIMITER, i);
		}
		public FuncContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IHaCSListener typedListener = listener as IHaCSListener;
			if (typedListener != null) typedListener.EnterFunc(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IHaCSListener typedListener = listener as IHaCSListener;
			if (typedListener != null) typedListener.ExitFunc(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHaCSVisitor<TResult> typedVisitor = visitor as IHaCSVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunc(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ParensContext : ExpressionContext {
		public ITerminalNode LPAREN() { return GetToken(HaCSParser.LPAREN, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode RPAREN() { return GetToken(HaCSParser.RPAREN, 0); }
		public ParensContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IHaCSListener typedListener = listener as IHaCSListener;
			if (typedListener != null) typedListener.EnterParens(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IHaCSListener typedListener = listener as IHaCSListener;
			if (typedListener != null) typedListener.ExitParens(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHaCSVisitor<TResult> typedVisitor = visitor as IHaCSVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParens(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VarContext : ExpressionContext {
		public ITerminalNode IDENTIFIER() { return GetToken(HaCSParser.IDENTIFIER, 0); }
		public ITerminalNode DOT() { return GetToken(HaCSParser.DOT, 0); }
		public ListOppContext listOpp() {
			return GetRuleContext<ListOppContext>(0);
		}
		public VarContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IHaCSListener typedListener = listener as IHaCSListener;
			if (typedListener != null) typedListener.EnterVar(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IHaCSListener typedListener = listener as IHaCSListener;
			if (typedListener != null) typedListener.ExitVar(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHaCSVisitor<TResult> typedVisitor = visitor as IHaCSVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVar(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Arith1Context : ExpressionContext {
		public ExpressionContext left;
		public ExpressionContext right;
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode ADD() { return GetToken(HaCSParser.ADD, 0); }
		public ITerminalNode SUB() { return GetToken(HaCSParser.SUB, 0); }
		public Arith1Context(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IHaCSListener typedListener = listener as IHaCSListener;
			if (typedListener != null) typedListener.EnterArith1(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IHaCSListener typedListener = listener as IHaCSListener;
			if (typedListener != null) typedListener.ExitArith1(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHaCSVisitor<TResult> typedVisitor = visitor as IHaCSVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArith1(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PipeContext : ExpressionContext {
		public ExpressionContext left;
		public ExpressionContext right;
		public ITerminalNode PIPE() { return GetToken(HaCSParser.PIPE, 0); }
		public ITerminalNode IDENTIFIER() { return GetToken(HaCSParser.IDENTIFIER, 0); }
		public ITerminalNode LTMINUS() { return GetToken(HaCSParser.LTMINUS, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public PipeContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IHaCSListener typedListener = listener as IHaCSListener;
			if (typedListener != null) typedListener.EnterPipe(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IHaCSListener typedListener = listener as IHaCSListener;
			if (typedListener != null) typedListener.ExitPipe(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHaCSVisitor<TResult> typedVisitor = visitor as IHaCSVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPipe(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class RangeContext : ExpressionContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode[] DOT() { return GetTokens(HaCSParser.DOT); }
		public ITerminalNode DOT(int i) {
			return GetToken(HaCSParser.DOT, i);
		}
		public RangeContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IHaCSListener typedListener = listener as IHaCSListener;
			if (typedListener != null) typedListener.EnterRange(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IHaCSListener typedListener = listener as IHaCSListener;
			if (typedListener != null) typedListener.ExitRange(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHaCSVisitor<TResult> typedVisitor = visitor as IHaCSVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRange(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AndContext : ExpressionContext {
		public ExpressionContext left;
		public ExpressionContext right;
		public ITerminalNode AND() { return GetToken(HaCSParser.AND, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public AndContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IHaCSListener typedListener = listener as IHaCSListener;
			if (typedListener != null) typedListener.EnterAnd(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IHaCSListener typedListener = listener as IHaCSListener;
			if (typedListener != null) typedListener.ExitAnd(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHaCSVisitor<TResult> typedVisitor = visitor as IHaCSVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAnd(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LitContext : ExpressionContext {
		public ITerminalNode INT() { return GetToken(HaCSParser.INT, 0); }
		public ITerminalNode FLOAT() { return GetToken(HaCSParser.FLOAT, 0); }
		public ITerminalNode CHAR() { return GetToken(HaCSParser.CHAR, 0); }
		public ITerminalNode BOOL() { return GetToken(HaCSParser.BOOL, 0); }
		public LitContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IHaCSListener typedListener = listener as IHaCSListener;
			if (typedListener != null) typedListener.EnterLit(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IHaCSListener typedListener = listener as IHaCSListener;
			if (typedListener != null) typedListener.ExitLit(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHaCSVisitor<TResult> typedVisitor = visitor as IHaCSVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLit(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class CompareContext : ExpressionContext {
		public ExpressionContext left;
		public ExpressionContext right;
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode LE() { return GetToken(HaCSParser.LE, 0); }
		public ITerminalNode GE() { return GetToken(HaCSParser.GE, 0); }
		public ITerminalNode GT() { return GetToken(HaCSParser.GT, 0); }
		public ITerminalNode LT() { return GetToken(HaCSParser.LT, 0); }
		public CompareContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IHaCSListener typedListener = listener as IHaCSListener;
			if (typedListener != null) typedListener.EnterCompare(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IHaCSListener typedListener = listener as IHaCSListener;
			if (typedListener != null) typedListener.ExitCompare(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHaCSVisitor<TResult> typedVisitor = visitor as IHaCSVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCompare(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NegateContext : ExpressionContext {
		public ITerminalNode NEGATE() { return GetToken(HaCSParser.NEGATE, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public NegateContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IHaCSListener typedListener = listener as IHaCSListener;
			if (typedListener != null) typedListener.EnterNegate(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IHaCSListener typedListener = listener as IHaCSListener;
			if (typedListener != null) typedListener.ExitNegate(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHaCSVisitor<TResult> typedVisitor = visitor as IHaCSVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNegate(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class EqualityContext : ExpressionContext {
		public ExpressionContext left;
		public ExpressionContext right;
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode EQ() { return GetToken(HaCSParser.EQ, 0); }
		public ITerminalNode NEQ() { return GetToken(HaCSParser.NEQ, 0); }
		public EqualityContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IHaCSListener typedListener = listener as IHaCSListener;
			if (typedListener != null) typedListener.EnterEquality(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IHaCSListener typedListener = listener as IHaCSListener;
			if (typedListener != null) typedListener.ExitEquality(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHaCSVisitor<TResult> typedVisitor = visitor as IHaCSVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEquality(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LambdaContext : ExpressionContext {
		public LambdaExpContext lambdaExp() {
			return GetRuleContext<LambdaExpContext>(0);
		}
		public LambdaContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IHaCSListener typedListener = listener as IHaCSListener;
			if (typedListener != null) typedListener.EnterLambda(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IHaCSListener typedListener = listener as IHaCSListener;
			if (typedListener != null) typedListener.ExitLambda(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHaCSVisitor<TResult> typedVisitor = visitor as IHaCSVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLambda(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		return expression(0);
	}

	private ExpressionContext expression(int _p) {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = State;
		ExpressionContext _localctx = new ExpressionContext(_ctx, _parentState);
		ExpressionContext _prevctx = _localctx;
		int _startState = 30;
		EnterRecursionRule(_localctx, 30, RULE_expression, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 206;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,14,_ctx) ) {
			case 1:
				{
				_localctx = new ParensContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;

				State = 181; Match(LPAREN);
				State = 182; expression(0);
				State = 183; Match(RPAREN);
				}
				break;

			case 2:
				{
				_localctx = new NegateContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 185; Match(NEGATE);
				State = 186; expression(14);
				}
				break;

			case 3:
				{
				_localctx = new FuncContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 187; Match(IDENTIFIER);
				State = 188; Match(LPAREN);
				State = 189; ((FuncContext)_localctx).exp = expression(0);
				State = 194;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==DELIMITER) {
					{
					{
					State = 190; Match(DELIMITER);
					State = 191; ((FuncContext)_localctx).expList = expression(0);
					}
					}
					State = 196;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				State = 197; Match(RPAREN);
				}
				break;

			case 4:
				{
				_localctx = new LitContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 199;
				_la = _input.La(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << INT) | (1L << FLOAT) | (1L << CHAR) | (1L << BOOL))) != 0)) ) {
				_errHandler.RecoverInline(this);
				} else {
					Consume();
				}
				}
				break;

			case 5:
				{
				_localctx = new VarContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 200; Match(IDENTIFIER);
				State = 203;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,13,_ctx) ) {
				case 1:
					{
					State = 201; Match(DOT);
					State = 202; listOpp();
					}
					break;
				}
				}
				break;

			case 6:
				{
				_localctx = new LambdaContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 205; lambdaExp();
				}
				break;
			}
			_ctx.stop = _input.Lt(-1);
			State = 240;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,16,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 238;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,15,_ctx) ) {
					case 1:
						{
						_localctx = new ExponentContext(new ExpressionContext(_parentctx, _parentState));
						((ExponentContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 208;
						if (!(Precpred(_ctx, 13))) throw new FailedPredicateException(this, "Precpred(_ctx, 13)");
						State = 209; Match(EXP);
						State = 210; ((ExponentContext)_localctx).right = expression(14);
						}
						break;

					case 2:
						{
						_localctx = new Arith2Context(new ExpressionContext(_parentctx, _parentState));
						((Arith2Context)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 211;
						if (!(Precpred(_ctx, 12))) throw new FailedPredicateException(this, "Precpred(_ctx, 12)");
						State = 212;
						_la = _input.La(1);
						if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << MUL) | (1L << DIV) | (1L << MOD))) != 0)) ) {
						_errHandler.RecoverInline(this);
						} else {
							Consume();
						}
						State = 213; ((Arith2Context)_localctx).right = expression(13);
						}
						break;

					case 3:
						{
						_localctx = new Arith1Context(new ExpressionContext(_parentctx, _parentState));
						((Arith1Context)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 214;
						if (!(Precpred(_ctx, 11))) throw new FailedPredicateException(this, "Precpred(_ctx, 11)");
						State = 215;
						_la = _input.La(1);
						if ( !(_la==ADD || _la==SUB) ) {
						_errHandler.RecoverInline(this);
						} else {
							Consume();
						}
						State = 216; ((Arith1Context)_localctx).right = expression(12);
						}
						break;

					case 4:
						{
						_localctx = new CompareContext(new ExpressionContext(_parentctx, _parentState));
						((CompareContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 217;
						if (!(Precpred(_ctx, 10))) throw new FailedPredicateException(this, "Precpred(_ctx, 10)");
						State = 218;
						_la = _input.La(1);
						if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << GT) | (1L << GE) | (1L << LT) | (1L << LE))) != 0)) ) {
						_errHandler.RecoverInline(this);
						} else {
							Consume();
						}
						State = 219; ((CompareContext)_localctx).right = expression(11);
						}
						break;

					case 5:
						{
						_localctx = new EqualityContext(new ExpressionContext(_parentctx, _parentState));
						((EqualityContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 220;
						if (!(Precpred(_ctx, 9))) throw new FailedPredicateException(this, "Precpred(_ctx, 9)");
						State = 221;
						_la = _input.La(1);
						if ( !(_la==EQ || _la==NEQ) ) {
						_errHandler.RecoverInline(this);
						} else {
							Consume();
						}
						State = 222; ((EqualityContext)_localctx).right = expression(10);
						}
						break;

					case 6:
						{
						_localctx = new PipeContext(new ExpressionContext(_parentctx, _parentState));
						((PipeContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 223;
						if (!(Precpred(_ctx, 8))) throw new FailedPredicateException(this, "Precpred(_ctx, 8)");
						State = 224; Match(PIPE);
						State = 225; Match(IDENTIFIER);
						State = 226; Match(LTMINUS);
						State = 227; ((PipeContext)_localctx).right = expression(9);
						}
						break;

					case 7:
						{
						_localctx = new AndContext(new ExpressionContext(_parentctx, _parentState));
						((AndContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 228;
						if (!(Precpred(_ctx, 7))) throw new FailedPredicateException(this, "Precpred(_ctx, 7)");
						State = 229; Match(AND);
						State = 230; ((AndContext)_localctx).right = expression(8);
						}
						break;

					case 8:
						{
						_localctx = new OrContext(new ExpressionContext(_parentctx, _parentState));
						((OrContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 231;
						if (!(Precpred(_ctx, 6))) throw new FailedPredicateException(this, "Precpred(_ctx, 6)");
						State = 232; Match(OR);
						State = 233; ((OrContext)_localctx).right = expression(7);
						}
						break;

					case 9:
						{
						_localctx = new RangeContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 234;
						if (!(Precpred(_ctx, 1))) throw new FailedPredicateException(this, "Precpred(_ctx, 1)");
						State = 235; Match(DOT);
						State = 236; Match(DOT);
						State = 237; expression(2);
						}
						break;
					}
					} 
				}
				State = 242;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,16,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class LambdaExpContext : ParserRuleContext {
		public ITerminalNode LPAREN() { return GetToken(HaCSParser.LPAREN, 0); }
		public TypeContext[] type() {
			return GetRuleContexts<TypeContext>();
		}
		public TypeContext type(int i) {
			return GetRuleContext<TypeContext>(i);
		}
		public ITerminalNode[] IDENTIFIER() { return GetTokens(HaCSParser.IDENTIFIER); }
		public ITerminalNode IDENTIFIER(int i) {
			return GetToken(HaCSParser.IDENTIFIER, i);
		}
		public ITerminalNode RPAREN() { return GetToken(HaCSParser.RPAREN, 0); }
		public ITerminalNode LAMBDA() { return GetToken(HaCSParser.LAMBDA, 0); }
		public LambdaBodyContext lambdaBody() {
			return GetRuleContext<LambdaBodyContext>(0);
		}
		public ITerminalNode[] DELIMITER() { return GetTokens(HaCSParser.DELIMITER); }
		public ITerminalNode DELIMITER(int i) {
			return GetToken(HaCSParser.DELIMITER, i);
		}
		public LambdaExpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lambdaExp; } }
		public override void EnterRule(IParseTreeListener listener) {
			IHaCSListener typedListener = listener as IHaCSListener;
			if (typedListener != null) typedListener.EnterLambdaExp(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IHaCSListener typedListener = listener as IHaCSListener;
			if (typedListener != null) typedListener.ExitLambdaExp(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHaCSVisitor<TResult> typedVisitor = visitor as IHaCSVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLambdaExp(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LambdaExpContext lambdaExp() {
		LambdaExpContext _localctx = new LambdaExpContext(_ctx, State);
		EnterRule(_localctx, 32, RULE_lambdaExp);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 243; Match(LPAREN);
			State = 244; type();
			State = 245; Match(IDENTIFIER);
			State = 252;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==DELIMITER) {
				{
				{
				State = 246; Match(DELIMITER);
				State = 247; type();
				State = 248; Match(IDENTIFIER);
				}
				}
				State = 254;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 255; Match(RPAREN);
			State = 256; Match(LAMBDA);
			State = 257; lambdaBody();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LambdaBodyContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public BodyContext body() {
			return GetRuleContext<BodyContext>(0);
		}
		public LambdaBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lambdaBody; } }
		public override void EnterRule(IParseTreeListener listener) {
			IHaCSListener typedListener = listener as IHaCSListener;
			if (typedListener != null) typedListener.EnterLambdaBody(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IHaCSListener typedListener = listener as IHaCSListener;
			if (typedListener != null) typedListener.ExitLambdaBody(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHaCSVisitor<TResult> typedVisitor = visitor as IHaCSVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLambdaBody(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LambdaBodyContext lambdaBody() {
		LambdaBodyContext _localctx = new LambdaBodyContext(_ctx, State);
		EnterRule(_localctx, 34, RULE_lambdaBody);
		try {
			State = 261;
			switch (_input.La(1)) {
			case INT:
			case FLOAT:
			case CHAR:
			case BOOL:
			case IDENTIFIER:
			case NEGATE:
			case LPAREN:
				EnterOuterAlt(_localctx, 1);
				{
				State = 259; expression(0);
				}
				break;
			case LCURLBRACKET:
				EnterOuterAlt(_localctx, 2);
				{
				State = 260; body();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ListOppContext : ParserRuleContext {
		public ListOppContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_listOpp; } }
	 
		public ListOppContext() { }
		public virtual void CopyFrom(ListOppContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class FoldContext : ListOppContext {
		public ITerminalNode FOLD() { return GetToken(HaCSParser.FOLD, 0); }
		public ITerminalNode LPAREN() { return GetToken(HaCSParser.LPAREN, 0); }
		public ITerminalNode RPAREN() { return GetToken(HaCSParser.RPAREN, 0); }
		public ITerminalNode ADD() { return GetToken(HaCSParser.ADD, 0); }
		public ITerminalNode SUB() { return GetToken(HaCSParser.SUB, 0); }
		public ITerminalNode MUL() { return GetToken(HaCSParser.MUL, 0); }
		public FoldContext(ListOppContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IHaCSListener typedListener = listener as IHaCSListener;
			if (typedListener != null) typedListener.EnterFold(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IHaCSListener typedListener = listener as IHaCSListener;
			if (typedListener != null) typedListener.ExitFold(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHaCSVisitor<TResult> typedVisitor = visitor as IHaCSVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFold(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LastContext : ListOppContext {
		public ITerminalNode LAST() { return GetToken(HaCSParser.LAST, 0); }
		public ITerminalNode LPAREN() { return GetToken(HaCSParser.LPAREN, 0); }
		public ITerminalNode RPAREN() { return GetToken(HaCSParser.RPAREN, 0); }
		public LastContext(ListOppContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IHaCSListener typedListener = listener as IHaCSListener;
			if (typedListener != null) typedListener.EnterLast(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IHaCSListener typedListener = listener as IHaCSListener;
			if (typedListener != null) typedListener.ExitLast(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHaCSVisitor<TResult> typedVisitor = visitor as IHaCSVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLast(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExcludeContext : ListOppContext {
		public ITerminalNode EXCLUDE() { return GetToken(HaCSParser.EXCLUDE, 0); }
		public ITerminalNode LPAREN() { return GetToken(HaCSParser.LPAREN, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode RPAREN() { return GetToken(HaCSParser.RPAREN, 0); }
		public ExcludeContext(ListOppContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IHaCSListener typedListener = listener as IHaCSListener;
			if (typedListener != null) typedListener.EnterExclude(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IHaCSListener typedListener = listener as IHaCSListener;
			if (typedListener != null) typedListener.ExitExclude(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHaCSVisitor<TResult> typedVisitor = visitor as IHaCSVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExclude(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LengthContext : ListOppContext {
		public ITerminalNode LENGTH() { return GetToken(HaCSParser.LENGTH, 0); }
		public ITerminalNode LPAREN() { return GetToken(HaCSParser.LPAREN, 0); }
		public ITerminalNode RPAREN() { return GetToken(HaCSParser.RPAREN, 0); }
		public LengthContext(ListOppContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IHaCSListener typedListener = listener as IHaCSListener;
			if (typedListener != null) typedListener.EnterLength(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IHaCSListener typedListener = listener as IHaCSListener;
			if (typedListener != null) typedListener.ExitLength(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHaCSVisitor<TResult> typedVisitor = visitor as IHaCSVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLength(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class FindContext : ListOppContext {
		public ITerminalNode FIND() { return GetToken(HaCSParser.FIND, 0); }
		public ITerminalNode LPAREN() { return GetToken(HaCSParser.LPAREN, 0); }
		public LambdaExpContext lambdaExp() {
			return GetRuleContext<LambdaExpContext>(0);
		}
		public ITerminalNode RPAREN() { return GetToken(HaCSParser.RPAREN, 0); }
		public FindContext(ListOppContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IHaCSListener typedListener = listener as IHaCSListener;
			if (typedListener != null) typedListener.EnterFind(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IHaCSListener typedListener = listener as IHaCSListener;
			if (typedListener != null) typedListener.ExitFind(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHaCSVisitor<TResult> typedVisitor = visitor as IHaCSVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFind(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ContainsContext : ListOppContext {
		public ITerminalNode CONTAINS() { return GetToken(HaCSParser.CONTAINS, 0); }
		public ITerminalNode LPAREN() { return GetToken(HaCSParser.LPAREN, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode RPAREN() { return GetToken(HaCSParser.RPAREN, 0); }
		public ContainsContext(ListOppContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IHaCSListener typedListener = listener as IHaCSListener;
			if (typedListener != null) typedListener.EnterContains(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IHaCSListener typedListener = listener as IHaCSListener;
			if (typedListener != null) typedListener.ExitContains(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHaCSVisitor<TResult> typedVisitor = visitor as IHaCSVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitContains(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IncludeContext : ListOppContext {
		public ITerminalNode INCLUDE() { return GetToken(HaCSParser.INCLUDE, 0); }
		public ITerminalNode LPAREN() { return GetToken(HaCSParser.LPAREN, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode RPAREN() { return GetToken(HaCSParser.RPAREN, 0); }
		public IncludeContext(ListOppContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IHaCSListener typedListener = listener as IHaCSListener;
			if (typedListener != null) typedListener.EnterInclude(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IHaCSListener typedListener = listener as IHaCSListener;
			if (typedListener != null) typedListener.ExitInclude(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHaCSVisitor<TResult> typedVisitor = visitor as IHaCSVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInclude(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class FirstContext : ListOppContext {
		public ITerminalNode FIRST() { return GetToken(HaCSParser.FIRST, 0); }
		public ITerminalNode LPAREN() { return GetToken(HaCSParser.LPAREN, 0); }
		public ITerminalNode RPAREN() { return GetToken(HaCSParser.RPAREN, 0); }
		public FirstContext(ListOppContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IHaCSListener typedListener = listener as IHaCSListener;
			if (typedListener != null) typedListener.EnterFirst(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IHaCSListener typedListener = listener as IHaCSListener;
			if (typedListener != null) typedListener.ExitFirst(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHaCSVisitor<TResult> typedVisitor = visitor as IHaCSVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFirst(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class WhereContext : ListOppContext {
		public ITerminalNode WHERE() { return GetToken(HaCSParser.WHERE, 0); }
		public ITerminalNode LPAREN() { return GetToken(HaCSParser.LPAREN, 0); }
		public LambdaExpContext lambdaExp() {
			return GetRuleContext<LambdaExpContext>(0);
		}
		public ITerminalNode RPAREN() { return GetToken(HaCSParser.RPAREN, 0); }
		public WhereContext(ListOppContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IHaCSListener typedListener = listener as IHaCSListener;
			if (typedListener != null) typedListener.EnterWhere(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IHaCSListener typedListener = listener as IHaCSListener;
			if (typedListener != null) typedListener.ExitWhere(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHaCSVisitor<TResult> typedVisitor = visitor as IHaCSVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWhere(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MapContext : ListOppContext {
		public ITerminalNode MAP() { return GetToken(HaCSParser.MAP, 0); }
		public ITerminalNode LPAREN() { return GetToken(HaCSParser.LPAREN, 0); }
		public LambdaExpContext lambdaExp() {
			return GetRuleContext<LambdaExpContext>(0);
		}
		public ITerminalNode RPAREN() { return GetToken(HaCSParser.RPAREN, 0); }
		public MapContext(ListOppContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IHaCSListener typedListener = listener as IHaCSListener;
			if (typedListener != null) typedListener.EnterMap(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IHaCSListener typedListener = listener as IHaCSListener;
			if (typedListener != null) typedListener.ExitMap(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHaCSVisitor<TResult> typedVisitor = visitor as IHaCSVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMap(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ReduceContext : ListOppContext {
		public ITerminalNode REDUCE() { return GetToken(HaCSParser.REDUCE, 0); }
		public ITerminalNode LPAREN() { return GetToken(HaCSParser.LPAREN, 0); }
		public LambdaExpContext lambdaExp() {
			return GetRuleContext<LambdaExpContext>(0);
		}
		public ITerminalNode RPAREN() { return GetToken(HaCSParser.RPAREN, 0); }
		public ReduceContext(ListOppContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IHaCSListener typedListener = listener as IHaCSListener;
			if (typedListener != null) typedListener.EnterReduce(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IHaCSListener typedListener = listener as IHaCSListener;
			if (typedListener != null) typedListener.ExitReduce(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHaCSVisitor<TResult> typedVisitor = visitor as IHaCSVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReduce(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExcludeAtContext : ListOppContext {
		public ITerminalNode EXCLUDEAT() { return GetToken(HaCSParser.EXCLUDEAT, 0); }
		public ITerminalNode LPAREN() { return GetToken(HaCSParser.LPAREN, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode RPAREN() { return GetToken(HaCSParser.RPAREN, 0); }
		public ExcludeAtContext(ListOppContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IHaCSListener typedListener = listener as IHaCSListener;
			if (typedListener != null) typedListener.EnterExcludeAt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IHaCSListener typedListener = listener as IHaCSListener;
			if (typedListener != null) typedListener.ExitExcludeAt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHaCSVisitor<TResult> typedVisitor = visitor as IHaCSVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExcludeAt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ListOppContext listOpp() {
		ListOppContext _localctx = new ListOppContext(_ctx, State);
		EnterRule(_localctx, 36, RULE_listOpp);
		int _la;
		try {
			State = 316;
			switch (_input.La(1)) {
			case FIND:
				_localctx = new FindContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 263; Match(FIND);
				State = 264; Match(LPAREN);
				State = 265; lambdaExp();
				State = 266; Match(RPAREN);
				}
				break;
			case WHERE:
				_localctx = new WhereContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 268; Match(WHERE);
				State = 269; Match(LPAREN);
				State = 270; lambdaExp();
				State = 271; Match(RPAREN);
				}
				break;
			case FIRST:
				_localctx = new FirstContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 273; Match(FIRST);
				State = 274; Match(LPAREN);
				State = 275; Match(RPAREN);
				}
				break;
			case LAST:
				_localctx = new LastContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 276; Match(LAST);
				State = 277; Match(LPAREN);
				State = 278; Match(RPAREN);
				}
				break;
			case MAP:
				_localctx = new MapContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 279; Match(MAP);
				State = 280; Match(LPAREN);
				State = 281; lambdaExp();
				State = 282; Match(RPAREN);
				}
				break;
			case REDUCE:
				_localctx = new ReduceContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 284; Match(REDUCE);
				State = 285; Match(LPAREN);
				State = 286; lambdaExp();
				State = 287; Match(RPAREN);
				}
				break;
			case CONTAINS:
				_localctx = new ContainsContext(_localctx);
				EnterOuterAlt(_localctx, 7);
				{
				State = 289; Match(CONTAINS);
				State = 290; Match(LPAREN);
				State = 291; expression(0);
				State = 292; Match(RPAREN);
				}
				break;
			case INCLUDE:
				_localctx = new IncludeContext(_localctx);
				EnterOuterAlt(_localctx, 8);
				{
				State = 294; Match(INCLUDE);
				State = 295; Match(LPAREN);
				State = 296; expression(0);
				State = 297; Match(RPAREN);
				}
				break;
			case EXCLUDE:
				_localctx = new ExcludeContext(_localctx);
				EnterOuterAlt(_localctx, 9);
				{
				State = 299; Match(EXCLUDE);
				State = 300; Match(LPAREN);
				State = 301; expression(0);
				State = 302; Match(RPAREN);
				}
				break;
			case EXCLUDEAT:
				_localctx = new ExcludeAtContext(_localctx);
				EnterOuterAlt(_localctx, 10);
				{
				State = 304; Match(EXCLUDEAT);
				State = 305; Match(LPAREN);
				State = 306; expression(0);
				State = 307; Match(RPAREN);
				}
				break;
			case LENGTH:
				_localctx = new LengthContext(_localctx);
				EnterOuterAlt(_localctx, 11);
				{
				State = 309; Match(LENGTH);
				State = 310; Match(LPAREN);
				State = 311; Match(RPAREN);
				}
				break;
			case FOLD:
				_localctx = new FoldContext(_localctx);
				EnterOuterAlt(_localctx, 12);
				{
				State = 312; Match(FOLD);
				State = 313; Match(LPAREN);
				State = 314;
				_la = _input.La(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << MUL) | (1L << ADD) | (1L << SUB))) != 0)) ) {
				_errHandler.RecoverInline(this);
				} else {
					Consume();
				}
				State = 315; Match(RPAREN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeContext : ParserRuleContext {
		public PrimitiveTypeContext primitiveType() {
			return GetRuleContext<PrimitiveTypeContext>(0);
		}
		public ListTypeContext listType() {
			return GetRuleContext<ListTypeContext>(0);
		}
		public TypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type; } }
		public override void EnterRule(IParseTreeListener listener) {
			IHaCSListener typedListener = listener as IHaCSListener;
			if (typedListener != null) typedListener.EnterType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IHaCSListener typedListener = listener as IHaCSListener;
			if (typedListener != null) typedListener.ExitType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHaCSVisitor<TResult> typedVisitor = visitor as IHaCSVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeContext type() {
		TypeContext _localctx = new TypeContext(_ctx, State);
		EnterRule(_localctx, 38, RULE_type);
		try {
			State = 320;
			switch (_input.La(1)) {
			case INT_Type:
			case FLOAT_Type:
			case CHAR_Type:
			case BOOL_Type:
				EnterOuterAlt(_localctx, 1);
				{
				State = 318; primitiveType();
				}
				break;
			case LIST:
				EnterOuterAlt(_localctx, 2);
				{
				State = 319; listType();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrimitiveTypeContext : ParserRuleContext {
		public ITerminalNode INT_Type() { return GetToken(HaCSParser.INT_Type, 0); }
		public ITerminalNode CHAR_Type() { return GetToken(HaCSParser.CHAR_Type, 0); }
		public ITerminalNode FLOAT_Type() { return GetToken(HaCSParser.FLOAT_Type, 0); }
		public ITerminalNode BOOL_Type() { return GetToken(HaCSParser.BOOL_Type, 0); }
		public PrimitiveTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_primitiveType; } }
		public override void EnterRule(IParseTreeListener listener) {
			IHaCSListener typedListener = listener as IHaCSListener;
			if (typedListener != null) typedListener.EnterPrimitiveType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IHaCSListener typedListener = listener as IHaCSListener;
			if (typedListener != null) typedListener.ExitPrimitiveType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHaCSVisitor<TResult> typedVisitor = visitor as IHaCSVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrimitiveType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrimitiveTypeContext primitiveType() {
		PrimitiveTypeContext _localctx = new PrimitiveTypeContext(_ctx, State);
		EnterRule(_localctx, 40, RULE_primitiveType);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 322;
			_la = _input.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << INT_Type) | (1L << FLOAT_Type) | (1L << CHAR_Type) | (1L << BOOL_Type))) != 0)) ) {
			_errHandler.RecoverInline(this);
			} else {
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ListTypeContext : ParserRuleContext {
		public ITerminalNode LIST() { return GetToken(HaCSParser.LIST, 0); }
		public ITerminalNode LT() { return GetToken(HaCSParser.LT, 0); }
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public ITerminalNode GT() { return GetToken(HaCSParser.GT, 0); }
		public ListTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_listType; } }
		public override void EnterRule(IParseTreeListener listener) {
			IHaCSListener typedListener = listener as IHaCSListener;
			if (typedListener != null) typedListener.EnterListType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IHaCSListener typedListener = listener as IHaCSListener;
			if (typedListener != null) typedListener.ExitListType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHaCSVisitor<TResult> typedVisitor = visitor as IHaCSVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitListType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ListTypeContext listType() {
		ListTypeContext _localctx = new ListTypeContext(_ctx, State);
		EnterRule(_localctx, 42, RULE_listType);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 324; Match(LIST);
			State = 325; Match(LT);
			State = 326; type();
			State = 327; Match(GT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CompileUnitContext : ParserRuleContext {
		public ITerminalNode Eof() { return GetToken(HaCSParser.Eof, 0); }
		public CompileUnitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_compileUnit; } }
		public override void EnterRule(IParseTreeListener listener) {
			IHaCSListener typedListener = listener as IHaCSListener;
			if (typedListener != null) typedListener.EnterCompileUnit(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IHaCSListener typedListener = listener as IHaCSListener;
			if (typedListener != null) typedListener.ExitCompileUnit(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHaCSVisitor<TResult> typedVisitor = visitor as IHaCSVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCompileUnit(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CompileUnitContext compileUnit() {
		CompileUnitContext _localctx = new CompileUnitContext(_ctx, State);
		EnterRule(_localctx, 44, RULE_compileUnit);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 329; Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 15: return expression_sempred((ExpressionContext)_localctx, predIndex);
		}
		return true;
	}
	private bool expression_sempred(ExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(_ctx, 13);

		case 1: return Precpred(_ctx, 12);

		case 2: return Precpred(_ctx, 11);

		case 3: return Precpred(_ctx, 10);

		case 4: return Precpred(_ctx, 9);

		case 5: return Precpred(_ctx, 8);

		case 6: return Precpred(_ctx, 7);

		case 7: return Precpred(_ctx, 6);

		case 8: return Precpred(_ctx, 1);
		}
		return true;
	}

	public static readonly string _serializedATN =
		"\x3\xAF6F\x8320\x479D\xB75C\x4880\x1605\x191C\xAB37\x3=\x14E\x4\x2\t\x2"+
		"\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6\x4\a\t\a\x4\b\t\b\x4\t\t"+
		"\t\x4\n\t\n\x4\v\t\v\x4\f\t\f\x4\r\t\r\x4\xE\t\xE\x4\xF\t\xF\x4\x10\t"+
		"\x10\x4\x11\t\x11\x4\x12\t\x12\x4\x13\t\x13\x4\x14\t\x14\x4\x15\t\x15"+
		"\x4\x16\t\x16\x4\x17\t\x17\x4\x18\t\x18\x3\x2\x3\x2\a\x2\x33\n\x2\f\x2"+
		"\xE\x2\x36\v\x2\x3\x3\x3\x3\x3\x3\x3\x3\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4"+
		"\x3\x4\a\x4\x42\n\x4\f\x4\xE\x4\x45\v\x4\x3\x4\x3\x4\x3\x4\x3\x5\x3\x5"+
		"\x3\x5\x3\x6\x3\x6\a\x6O\n\x6\f\x6\xE\x6R\v\x6\x3\x6\x3\x6\x3\x6\x3\a"+
		"\x3\a\a\aY\n\a\f\a\xE\a\\\v\a\x3\a\x3\a\x3\b\x3\b\x3\b\x3\b\x3\b\x3\b"+
		"\x3\b\x3\b\x3\b\x3\b\x5\bj\n\b\x3\t\x3\t\x3\t\x3\t\x3\t\a\tq\n\t\f\t\xE"+
		"\tt\v\t\x3\t\x3\t\x3\n\x3\n\x3\n\x3\n\x3\n\x3\n\x3\n\x3\v\x3\v\x3\v\x3"+
		"\v\x3\v\x3\v\x3\v\x3\v\x5\v\x87\n\v\x5\v\x89\n\v\x3\f\x3\f\x3\f\x3\r\x3"+
		"\r\x3\r\x3\r\x3\r\x3\r\x5\r\x94\n\r\x3\xE\x3\xE\x3\xE\x3\xE\x3\xE\x3\xE"+
		"\x3\xE\x3\xF\x3\xF\x3\xF\a\xF\xA0\n\xF\f\xF\xE\xF\xA3\v\xF\x3\xF\x3\xF"+
		"\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\a\xF\xAD\n\xF\f\xF\xE\xF\xB0\v\xF"+
		"\x5\xF\xB2\n\xF\x3\x10\x3\x10\x3\x10\x3\x11\x3\x11\x3\x11\x3\x11\x3\x11"+
		"\x3\x11\x3\x11\x3\x11\x3\x11\x3\x11\x3\x11\x3\x11\a\x11\xC3\n\x11\f\x11"+
		"\xE\x11\xC6\v\x11\x3\x11\x3\x11\x3\x11\x3\x11\x3\x11\x3\x11\x5\x11\xCE"+
		"\n\x11\x3\x11\x5\x11\xD1\n\x11\x3\x11\x3\x11\x3\x11\x3\x11\x3\x11\x3\x11"+
		"\x3\x11\x3\x11\x3\x11\x3\x11\x3\x11\x3\x11\x3\x11\x3\x11\x3\x11\x3\x11"+
		"\x3\x11\x3\x11\x3\x11\x3\x11\x3\x11\x3\x11\x3\x11\x3\x11\x3\x11\x3\x11"+
		"\x3\x11\x3\x11\x3\x11\x3\x11\a\x11\xF1\n\x11\f\x11\xE\x11\xF4\v\x11\x3"+
		"\x12\x3\x12\x3\x12\x3\x12\x3\x12\x3\x12\x3\x12\a\x12\xFD\n\x12\f\x12\xE"+
		"\x12\x100\v\x12\x3\x12\x3\x12\x3\x12\x3\x12\x3\x13\x3\x13\x5\x13\x108"+
		"\n\x13\x3\x14\x3\x14\x3\x14\x3\x14\x3\x14\x3\x14\x3\x14\x3\x14\x3\x14"+
		"\x3\x14\x3\x14\x3\x14\x3\x14\x3\x14\x3\x14\x3\x14\x3\x14\x3\x14\x3\x14"+
		"\x3\x14\x3\x14\x3\x14\x3\x14\x3\x14\x3\x14\x3\x14\x3\x14\x3\x14\x3\x14"+
		"\x3\x14\x3\x14\x3\x14\x3\x14\x3\x14\x3\x14\x3\x14\x3\x14\x3\x14\x3\x14"+
		"\x3\x14\x3\x14\x3\x14\x3\x14\x3\x14\x3\x14\x3\x14\x3\x14\x3\x14\x3\x14"+
		"\x3\x14\x3\x14\x3\x14\x3\x14\x5\x14\x13F\n\x14\x3\x15\x3\x15\x5\x15\x143"+
		"\n\x15\x3\x16\x3\x16\x3\x17\x3\x17\x3\x17\x3\x17\x3\x17\x3\x18\x3\x18"+
		"\x3\x18\x2\x2\x3 \x19\x2\x2\x4\x2\x6\x2\b\x2\n\x2\f\x2\xE\x2\x10\x2\x12"+
		"\x2\x14\x2\x16\x2\x18\x2\x1A\x2\x1C\x2\x1E\x2 \x2\"\x2$\x2&\x2(\x2*\x2"+
		",\x2.\x2\x2\t\x3\x2\x3\x6\x3\x2\x1E \x3\x2!\"\x4\x2(*,,\x3\x2&\'\x4\x2"+
		"\x1E\x1E!\"\x3\x2\a\n\x162\x2\x30\x3\x2\x2\x2\x4\x37\x3\x2\x2\x2\x6;\x3"+
		"\x2\x2\x2\bI\x3\x2\x2\x2\nL\x3\x2\x2\x2\fV\x3\x2\x2\x2\xEi\x3\x2\x2\x2"+
		"\x10k\x3\x2\x2\x2\x12w\x3\x2\x2\x2\x14\x88\x3\x2\x2\x2\x16\x8A\x3\x2\x2"+
		"\x2\x18\x93\x3\x2\x2\x2\x1A\x95\x3\x2\x2\x2\x1C\xB1\x3\x2\x2\x2\x1E\xB3"+
		"\x3\x2\x2\x2 \xD0\x3\x2\x2\x2\"\xF5\x3\x2\x2\x2$\x107\x3\x2\x2\x2&\x13E"+
		"\x3\x2\x2\x2(\x142\x3\x2\x2\x2*\x144\x3\x2\x2\x2,\x146\x3\x2\x2\x2.\x14B"+
		"\x3\x2\x2\x2\x30\x34\x5\x4\x3\x2\x31\x33\x5\x6\x4\x2\x32\x31\x3\x2\x2"+
		"\x2\x33\x36\x3\x2\x2\x2\x34\x32\x3\x2\x2\x2\x34\x35\x3\x2\x2\x2\x35\x3"+
		"\x3\x2\x2\x2\x36\x34\x3\x2\x2\x2\x37\x38\a\a\x2\x2\x38\x39\a\f\x2\x2\x39"+
		":\x5\n\x6\x2:\x5\x3\x2\x2\x2;<\x5(\x15\x2<=\a\x1C\x2\x2=>\a\x30\x2\x2"+
		">\x43\x5\b\x5\x2?@\a\x36\x2\x2@\x42\x5\b\x5\x2\x41?\x3\x2\x2\x2\x42\x45"+
		"\x3\x2\x2\x2\x43\x41\x3\x2\x2\x2\x43\x44\x3\x2\x2\x2\x44\x46\x3\x2\x2"+
		"\x2\x45\x43\x3\x2\x2\x2\x46G\a\x31\x2\x2GH\x5\n\x6\x2H\a\x3\x2\x2\x2I"+
		"J\x5(\x15\x2JK\a\x1C\x2\x2K\t\x3\x2\x2\x2LP\a\x34\x2\x2MO\x5\xE\b\x2N"+
		"M\x3\x2\x2\x2OR\x3\x2\x2\x2PN\x3\x2\x2\x2PQ\x3\x2\x2\x2QS\x3\x2\x2\x2"+
		"RP\x3\x2\x2\x2ST\x5\x1E\x10\x2TU\a\x35\x2\x2U\v\x3\x2\x2\x2VZ\a\x34\x2"+
		"\x2WY\x5\xE\b\x2XW\x3\x2\x2\x2Y\\\x3\x2\x2\x2ZX\x3\x2\x2\x2Z[\x3\x2\x2"+
		"\x2[]\x3\x2\x2\x2\\Z\x3\x2\x2\x2]^\a\x35\x2\x2^\r\x3\x2\x2\x2_j\x5\x12"+
		"\n\x2`\x61\x5\x18\r\x2\x61\x62\a\x37\x2\x2\x62j\x3\x2\x2\x2\x63\x64\x5"+
		"\x10\t\x2\x64\x65\a\x37\x2\x2\x65j\x3\x2\x2\x2\x66g\x5\x1E\x10\x2gh\a"+
		"\x37\x2\x2hj\x3\x2\x2\x2i_\x3\x2\x2\x2i`\x3\x2\x2\x2i\x63\x3\x2\x2\x2"+
		"i\x66\x3\x2\x2\x2j\xF\x3\x2\x2\x2kl\a\x18\x2\x2lm\a\x30\x2\x2mr\x5 \x11"+
		"\x2no\a\x36\x2\x2oq\x5 \x11\x2pn\x3\x2\x2\x2qt\x3\x2\x2\x2rp\x3\x2\x2"+
		"\x2rs\x3\x2\x2\x2su\x3\x2\x2\x2tr\x3\x2\x2\x2uv\a\x31\x2\x2v\x11\x3\x2"+
		"\x2\x2wx\a\r\x2\x2xy\a\x30\x2\x2yz\x5 \x11\x2z{\a\x31\x2\x2{|\x5\f\a\x2"+
		"|}\x5\x14\v\x2}\x13\x3\x2\x2\x2~\x7F\a\xE\x2\x2\x7F\x80\a\x30\x2\x2\x80"+
		"\x81\x5 \x11\x2\x81\x82\a\x31\x2\x2\x82\x83\x5\f\a\x2\x83\x84\x5\x14\v"+
		"\x2\x84\x89\x3\x2\x2\x2\x85\x87\x5\x16\f\x2\x86\x85\x3\x2\x2\x2\x86\x87"+
		"\x3\x2\x2\x2\x87\x89\x3\x2\x2\x2\x88~\x3\x2\x2\x2\x88\x86\x3\x2\x2\x2"+
		"\x89\x15\x3\x2\x2\x2\x8A\x8B\a\xF\x2\x2\x8B\x8C\x5\f\a\x2\x8C\x17\x3\x2"+
		"\x2\x2\x8D\x8E\x5*\x16\x2\x8E\x8F\a\x1C\x2\x2\x8F\x90\a/\x2\x2\x90\x91"+
		"\x5 \x11\x2\x91\x94\x3\x2\x2\x2\x92\x94\x5\x1A\xE\x2\x93\x8D\x3\x2\x2"+
		"\x2\x93\x92\x3\x2\x2\x2\x94\x19\x3\x2\x2\x2\x95\x96\x5,\x17\x2\x96\x97"+
		"\a\x1C\x2\x2\x97\x98\a/\x2\x2\x98\x99\a\x34\x2\x2\x99\x9A\x5\x1C\xF\x2"+
		"\x9A\x9B\a\x35\x2\x2\x9B\x1B\x3\x2\x2\x2\x9C\xA1\x5 \x11\x2\x9D\x9E\a"+
		"\x36\x2\x2\x9E\xA0\x5 \x11\x2\x9F\x9D\x3\x2\x2\x2\xA0\xA3\x3\x2\x2\x2"+
		"\xA1\x9F\x3\x2\x2\x2\xA1\xA2\x3\x2\x2\x2\xA2\xB2\x3\x2\x2\x2\xA3\xA1\x3"+
		"\x2\x2\x2\xA4\xA5\a\x34\x2\x2\xA5\xA6\x5\x1C\xF\x2\xA6\xAE\a\x35\x2\x2"+
		"\xA7\xA8\a\x36\x2\x2\xA8\xA9\a\x34\x2\x2\xA9\xAA\x5\x1C\xF\x2\xAA\xAB"+
		"\a\x35\x2\x2\xAB\xAD\x3\x2\x2\x2\xAC\xA7\x3\x2\x2\x2\xAD\xB0\x3\x2\x2"+
		"\x2\xAE\xAC\x3\x2\x2\x2\xAE\xAF\x3\x2\x2\x2\xAF\xB2\x3\x2\x2\x2\xB0\xAE"+
		"\x3\x2\x2\x2\xB1\x9C\x3\x2\x2\x2\xB1\xA4\x3\x2\x2\x2\xB2\x1D\x3\x2\x2"+
		"\x2\xB3\xB4\a\x10\x2\x2\xB4\xB5\x5 \x11\x2\xB5\x1F\x3\x2\x2\x2\xB6\xB7"+
		"\b\x11\x1\x2\xB7\xB8\a\x30\x2\x2\xB8\xB9\x5 \x11\x2\xB9\xBA\a\x31\x2\x2"+
		"\xBA\xD1\x3\x2\x2\x2\xBB\xBC\a.\x2\x2\xBC\xD1\x5 \x11\x10\xBD\xBE\a\x1C"+
		"\x2\x2\xBE\xBF\a\x30\x2\x2\xBF\xC4\x5 \x11\x2\xC0\xC1\a\x36\x2\x2\xC1"+
		"\xC3\x5 \x11\x2\xC2\xC0\x3\x2\x2\x2\xC3\xC6\x3\x2\x2\x2\xC4\xC2\x3\x2"+
		"\x2\x2\xC4\xC5\x3\x2\x2\x2\xC5\xC7\x3\x2\x2\x2\xC6\xC4\x3\x2\x2\x2\xC7"+
		"\xC8\a\x31\x2\x2\xC8\xD1\x3\x2\x2\x2\xC9\xD1\t\x2\x2\x2\xCA\xCD\a\x1C"+
		"\x2\x2\xCB\xCC\a+\x2\x2\xCC\xCE\x5&\x14\x2\xCD\xCB\x3\x2\x2\x2\xCD\xCE"+
		"\x3\x2\x2\x2\xCE\xD1\x3\x2\x2\x2\xCF\xD1\x5\"\x12\x2\xD0\xB6\x3\x2\x2"+
		"\x2\xD0\xBB\x3\x2\x2\x2\xD0\xBD\x3\x2\x2\x2\xD0\xC9\x3\x2\x2\x2\xD0\xCA"+
		"\x3\x2\x2\x2\xD0\xCF\x3\x2\x2\x2\xD1\xF2\x3\x2\x2\x2\xD2\xD3\f\xF\x2\x2"+
		"\xD3\xD4\a\x1D\x2\x2\xD4\xF1\x5 \x11\x10\xD5\xD6\f\xE\x2\x2\xD6\xD7\t"+
		"\x3\x2\x2\xD7\xF1\x5 \x11\xF\xD8\xD9\f\r\x2\x2\xD9\xDA\t\x4\x2\x2\xDA"+
		"\xF1\x5 \x11\xE\xDB\xDC\f\f\x2\x2\xDC\xDD\t\x5\x2\x2\xDD\xF1\x5 \x11\r"+
		"\xDE\xDF\f\v\x2\x2\xDF\xE0\t\x6\x2\x2\xE0\xF1\x5 \x11\f\xE1\xE2\f\n\x2"+
		"\x2\xE2\xE3\a%\x2\x2\xE3\xE4\a\x1C\x2\x2\xE4\xE5\a-\x2\x2\xE5\xF1\x5 "+
		"\x11\v\xE6\xE7\f\t\x2\x2\xE7\xE8\a#\x2\x2\xE8\xF1\x5 \x11\n\xE9\xEA\f"+
		"\b\x2\x2\xEA\xEB\a$\x2\x2\xEB\xF1\x5 \x11\t\xEC\xED\f\x3\x2\x2\xED\xEE"+
		"\a+\x2\x2\xEE\xEF\a+\x2\x2\xEF\xF1\x5 \x11\x4\xF0\xD2\x3\x2\x2\x2\xF0"+
		"\xD5\x3\x2\x2\x2\xF0\xD8\x3\x2\x2\x2\xF0\xDB\x3\x2\x2\x2\xF0\xDE\x3\x2"+
		"\x2\x2\xF0\xE1\x3\x2\x2\x2\xF0\xE6\x3\x2\x2\x2\xF0\xE9\x3\x2\x2\x2\xF0"+
		"\xEC\x3\x2\x2\x2\xF1\xF4\x3\x2\x2\x2\xF2\xF0\x3\x2\x2\x2\xF2\xF3\x3\x2"+
		"\x2\x2\xF3!\x3\x2\x2\x2\xF4\xF2\x3\x2\x2\x2\xF5\xF6\a\x30\x2\x2\xF6\xF7"+
		"\x5(\x15\x2\xF7\xFE\a\x1C\x2\x2\xF8\xF9\a\x36\x2\x2\xF9\xFA\x5(\x15\x2"+
		"\xFA\xFB\a\x1C\x2\x2\xFB\xFD\x3\x2\x2\x2\xFC\xF8\x3\x2\x2\x2\xFD\x100"+
		"\x3\x2\x2\x2\xFE\xFC\x3\x2\x2\x2\xFE\xFF\x3\x2\x2\x2\xFF\x101\x3\x2\x2"+
		"\x2\x100\xFE\x3\x2\x2\x2\x101\x102\a\x31\x2\x2\x102\x103\a\x38\x2\x2\x103"+
		"\x104\x5$\x13\x2\x104#\x3\x2\x2\x2\x105\x108\x5 \x11\x2\x106\x108\x5\n"+
		"\x6\x2\x107\x105\x3\x2\x2\x2\x107\x106\x3\x2\x2\x2\x108%\x3\x2\x2\x2\x109"+
		"\x10A\a\x11\x2\x2\x10A\x10B\a\x30\x2\x2\x10B\x10C\x5\"\x12\x2\x10C\x10D"+
		"\a\x31\x2\x2\x10D\x13F\x3\x2\x2\x2\x10E\x10F\a\x12\x2\x2\x10F\x110\a\x30"+
		"\x2\x2\x110\x111\x5\"\x12\x2\x111\x112\a\x31\x2\x2\x112\x13F\x3\x2\x2"+
		"\x2\x113\x114\a\x13\x2\x2\x114\x115\a\x30\x2\x2\x115\x13F\a\x31\x2\x2"+
		"\x116\x117\a\x14\x2\x2\x117\x118\a\x30\x2\x2\x118\x13F\a\x31\x2\x2\x119"+
		"\x11A\a\x15\x2\x2\x11A\x11B\a\x30\x2\x2\x11B\x11C\x5\"\x12\x2\x11C\x11D"+
		"\a\x31\x2\x2\x11D\x13F\x3\x2\x2\x2\x11E\x11F\a\x16\x2\x2\x11F\x120\a\x30"+
		"\x2\x2\x120\x121\x5\"\x12\x2\x121\x122\a\x31\x2\x2\x122\x13F\x3\x2\x2"+
		"\x2\x123\x124\a<\x2\x2\x124\x125\a\x30\x2\x2\x125\x126\x5 \x11\x2\x126"+
		"\x127\a\x31\x2\x2\x127\x13F\x3\x2\x2\x2\x128\x129\a\x19\x2\x2\x129\x12A"+
		"\a\x30\x2\x2\x12A\x12B\x5 \x11\x2\x12B\x12C\a\x31\x2\x2\x12C\x13F\x3\x2"+
		"\x2\x2\x12D\x12E\a\x1A\x2\x2\x12E\x12F\a\x30\x2\x2\x12F\x130\x5 \x11\x2"+
		"\x130\x131\a\x31\x2\x2\x131\x13F\x3\x2\x2\x2\x132\x133\a\x1B\x2\x2\x133"+
		"\x134\a\x30\x2\x2\x134\x135\x5 \x11\x2\x135\x136\a\x31\x2\x2\x136\x13F"+
		"\x3\x2\x2\x2\x137\x138\a=\x2\x2\x138\x139\a\x30\x2\x2\x139\x13F\a\x31"+
		"\x2\x2\x13A\x13B\a\x17\x2\x2\x13B\x13C\a\x30\x2\x2\x13C\x13D\t\a\x2\x2"+
		"\x13D\x13F\a\x31\x2\x2\x13E\x109\x3\x2\x2\x2\x13E\x10E\x3\x2\x2\x2\x13E"+
		"\x113\x3\x2\x2\x2\x13E\x116\x3\x2\x2\x2\x13E\x119\x3\x2\x2\x2\x13E\x11E"+
		"\x3\x2\x2\x2\x13E\x123\x3\x2\x2\x2\x13E\x128\x3\x2\x2\x2\x13E\x12D\x3"+
		"\x2\x2\x2\x13E\x132\x3\x2\x2\x2\x13E\x137\x3\x2\x2\x2\x13E\x13A\x3\x2"+
		"\x2\x2\x13F\'\x3\x2\x2\x2\x140\x143\x5*\x16\x2\x141\x143\x5,\x17\x2\x142"+
		"\x140\x3\x2\x2\x2\x142\x141\x3\x2\x2\x2\x143)\x3\x2\x2\x2\x144\x145\t"+
		"\b\x2\x2\x145+\x3\x2\x2\x2\x146\x147\a\v\x2\x2\x147\x148\a*\x2\x2\x148"+
		"\x149\x5(\x15\x2\x149\x14A\a(\x2\x2\x14A-\x3\x2\x2\x2\x14B\x14C\a\x2\x2"+
		"\x3\x14C/\x3\x2\x2\x2\x17\x34\x43PZir\x86\x88\x93\xA1\xAE\xB1\xC4\xCD"+
		"\xD0\xF0\xF2\xFE\x107\x13E\x142";
	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
} // namespace HaCS
