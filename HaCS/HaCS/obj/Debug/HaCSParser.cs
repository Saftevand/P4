//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.5.3
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:\Users\GryPetersen\Documents\P4\HaCS\HaCS\HaCS.g4 by ANTLR 4.5.3

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace HaCS {
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using System.Collections.Generic;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.5.3")]
[System.CLSCompliant(false)]
public partial class HaCSParser : Parser {
	public const int
		INT=1, FLOAT=2, CHAR=3, BOOL=4, INTType=5, FLOATType=6, CHARType=7, BOOLType=8, 
		LIST=9, MAIN=10, IF=11, ELSEIF=12, ELSE=13, RETURN=14, IDENTIFIER=15, 
		EXP=16, INC=17, DEC=18, MUL=19, DIV=20, MOD=21, ADD=22, SUB=23, AND=24, 
		OR=25, EQ=26, NEQ=27, GT=28, GE=29, LT=30, LE=31, NEGATE=32, ASSIGN=33, 
		LPAREN=34, RPAREN=35, LBRACKET=36, RBRACKET=37, LCURLBRACKET=38, RCURLBRACKET=39, 
		DELIMITER=40, EOS=41, LAMBDA=42, WS=43, COMMENT=44, LINE_COMMENT=45;
	public const int
		RULE_program = 0, RULE_main = 1, RULE_functionDecl = 2, RULE_formalParam = 3, 
		RULE_body = 4, RULE_stmt = 5, RULE_ifStmt = 6, RULE_elseifStmt = 7, RULE_elseStmt = 8, 
		RULE_varDcl = 9, RULE_returnStmt = 10, RULE_expression = 11, RULE_type = 12, 
		RULE_primitiveType = 13, RULE_listType = 14, RULE_literal = 15, RULE_compileUnit = 16;
	public static readonly string[] ruleNames = {
		"program", "main", "functionDecl", "formalParam", "body", "stmt", "ifStmt", 
		"elseifStmt", "elseStmt", "varDcl", "returnStmt", "expression", "type", 
		"primitiveType", "listType", "literal", "compileUnit"
	};

	private static readonly string[] _LiteralNames = {
		null, null, null, null, null, "'int'", "'float'", "'char'", "'bool'", 
		"'List'", "'main'", "'if'", "'elseif'", "'else'", "'return'", null, "'^'", 
		"'++'", "'--'", "'*'", "'/'", "'%'", "'+'", "'-'", "'&&'", "'||'", "'=='", 
		"'!='", "'>'", "'>='", "'<'", "'<='", "'!'", "'='", "'('", "')'", "'['", 
		"']'", "'{'", "'}'", "','", "';'", "'=>'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "INT", "FLOAT", "CHAR", "BOOL", "INTType", "FLOATType", "CHARType", 
		"BOOLType", "LIST", "MAIN", "IF", "ELSEIF", "ELSE", "RETURN", "IDENTIFIER", 
		"EXP", "INC", "DEC", "MUL", "DIV", "MOD", "ADD", "SUB", "AND", "OR", "EQ", 
		"NEQ", "GT", "GE", "LT", "LE", "NEGATE", "ASSIGN", "LPAREN", "RPAREN", 
		"LBRACKET", "RBRACKET", "LCURLBRACKET", "RCURLBRACKET", "DELIMITER", "EOS", 
		"LAMBDA", "WS", "COMMENT", "LINE_COMMENT"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[System.Obsolete("Use Vocabulary instead.")]
	public static readonly string[] tokenNames = GenerateTokenNames(DefaultVocabulary, _SymbolicNames.Length);

	private static string[] GenerateTokenNames(IVocabulary vocabulary, int length) {
		string[] tokenNames = new string[length];
		for (int i = 0; i < tokenNames.Length; i++) {
			tokenNames[i] = vocabulary.GetLiteralName(i);
			if (tokenNames[i] == null) {
				tokenNames[i] = vocabulary.GetSymbolicName(i);
			}

			if (tokenNames[i] == null) {
				tokenNames[i] = "<INVALID>";
			}
		}

		return tokenNames;
	}

	[System.Obsolete]
	public override string[] TokenNames
	{
		get
		{
			return tokenNames;
		}
	}

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "HaCS.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }


		protected const int EOF = Eof;

	public HaCSParser(ITokenStream input)
		: base(input)
	{
		_interp = new ParserATNSimulator(this,_ATN);
	}
	public partial class ProgramContext : ParserRuleContext {
		public MainContext main() {
			return GetRuleContext<MainContext>(0);
		}
		public FunctionDeclContext[] functionDecl() {
			return GetRuleContexts<FunctionDeclContext>();
		}
		public FunctionDeclContext functionDecl(int i) {
			return GetRuleContext<FunctionDeclContext>(i);
		}
		public ProgramContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_program; } }
		public override void EnterRule(IParseTreeListener listener) {
			IHaCSListener typedListener = listener as IHaCSListener;
			if (typedListener != null) typedListener.EnterProgram(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IHaCSListener typedListener = listener as IHaCSListener;
			if (typedListener != null) typedListener.ExitProgram(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHaCSVisitor<TResult> typedVisitor = visitor as IHaCSVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProgram(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProgramContext program() {
		ProgramContext _localctx = new ProgramContext(_ctx, State);
		EnterRule(_localctx, 0, RULE_program);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 34; main();
			State = 38;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << INTType) | (1L << FLOATType) | (1L << CHARType) | (1L << BOOLType) | (1L << LIST) | (1L << LPAREN))) != 0)) {
				{
				{
				State = 35; functionDecl();
				}
				}
				State = 40;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MainContext : ParserRuleContext {
		public ITerminalNode INTType() { return GetToken(HaCSParser.INTType, 0); }
		public ITerminalNode MAIN() { return GetToken(HaCSParser.MAIN, 0); }
		public BodyContext body() {
			return GetRuleContext<BodyContext>(0);
		}
		public MainContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_main; } }
		public override void EnterRule(IParseTreeListener listener) {
			IHaCSListener typedListener = listener as IHaCSListener;
			if (typedListener != null) typedListener.EnterMain(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IHaCSListener typedListener = listener as IHaCSListener;
			if (typedListener != null) typedListener.ExitMain(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHaCSVisitor<TResult> typedVisitor = visitor as IHaCSVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMain(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MainContext main() {
		MainContext _localctx = new MainContext(_ctx, State);
		EnterRule(_localctx, 2, RULE_main);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 41; Match(INTType);
			State = 42; Match(MAIN);
			State = 43; body();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionDeclContext : ParserRuleContext {
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public ITerminalNode IDENTIFIER() { return GetToken(HaCSParser.IDENTIFIER, 0); }
		public ITerminalNode LPAREN() { return GetToken(HaCSParser.LPAREN, 0); }
		public FormalParamContext[] formalParam() {
			return GetRuleContexts<FormalParamContext>();
		}
		public FormalParamContext formalParam(int i) {
			return GetRuleContext<FormalParamContext>(i);
		}
		public ITerminalNode RPAREN() { return GetToken(HaCSParser.RPAREN, 0); }
		public BodyContext body() {
			return GetRuleContext<BodyContext>(0);
		}
		public ITerminalNode[] DELIMITER() { return GetTokens(HaCSParser.DELIMITER); }
		public ITerminalNode DELIMITER(int i) {
			return GetToken(HaCSParser.DELIMITER, i);
		}
		public ITerminalNode LAMBDA() { return GetToken(HaCSParser.LAMBDA, 0); }
		public FunctionDeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionDecl; } }
		public override void EnterRule(IParseTreeListener listener) {
			IHaCSListener typedListener = listener as IHaCSListener;
			if (typedListener != null) typedListener.EnterFunctionDecl(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IHaCSListener typedListener = listener as IHaCSListener;
			if (typedListener != null) typedListener.ExitFunctionDecl(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHaCSVisitor<TResult> typedVisitor = visitor as IHaCSVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionDecl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionDeclContext functionDecl() {
		FunctionDeclContext _localctx = new FunctionDeclContext(_ctx, State);
		EnterRule(_localctx, 4, RULE_functionDecl);
		int _la;
		try {
			State = 72;
			switch (_input.La(1)) {
			case INTType:
			case FLOATType:
			case CHARType:
			case BOOLType:
			case LIST:
				EnterOuterAlt(_localctx, 1);
				{
				State = 45; type();
				State = 46; Match(IDENTIFIER);
				State = 47; Match(LPAREN);
				State = 48; formalParam();
				State = 53;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==DELIMITER) {
					{
					{
					State = 49; Match(DELIMITER);
					State = 50; formalParam();
					}
					}
					State = 55;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				State = 56; Match(RPAREN);
				State = 57; body();
				}
				break;
			case LPAREN:
				EnterOuterAlt(_localctx, 2);
				{
				State = 59; Match(LPAREN);
				State = 60; formalParam();
				State = 65;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==DELIMITER) {
					{
					{
					State = 61; Match(DELIMITER);
					State = 62; formalParam();
					}
					}
					State = 67;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				State = 68; Match(RPAREN);
				State = 69; Match(LAMBDA);
				State = 70; body();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FormalParamContext : ParserRuleContext {
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public ITerminalNode IDENTIFIER() { return GetToken(HaCSParser.IDENTIFIER, 0); }
		public FormalParamContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_formalParam; } }
		public override void EnterRule(IParseTreeListener listener) {
			IHaCSListener typedListener = listener as IHaCSListener;
			if (typedListener != null) typedListener.EnterFormalParam(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IHaCSListener typedListener = listener as IHaCSListener;
			if (typedListener != null) typedListener.ExitFormalParam(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHaCSVisitor<TResult> typedVisitor = visitor as IHaCSVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFormalParam(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FormalParamContext formalParam() {
		FormalParamContext _localctx = new FormalParamContext(_ctx, State);
		EnterRule(_localctx, 6, RULE_formalParam);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 74; type();
			State = 75; Match(IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BodyContext : ParserRuleContext {
		public ITerminalNode LCURLBRACKET() { return GetToken(HaCSParser.LCURLBRACKET, 0); }
		public ITerminalNode RCURLBRACKET() { return GetToken(HaCSParser.RCURLBRACKET, 0); }
		public StmtContext[] stmt() {
			return GetRuleContexts<StmtContext>();
		}
		public StmtContext stmt(int i) {
			return GetRuleContext<StmtContext>(i);
		}
		public BodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_body; } }
		public override void EnterRule(IParseTreeListener listener) {
			IHaCSListener typedListener = listener as IHaCSListener;
			if (typedListener != null) typedListener.EnterBody(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IHaCSListener typedListener = listener as IHaCSListener;
			if (typedListener != null) typedListener.ExitBody(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHaCSVisitor<TResult> typedVisitor = visitor as IHaCSVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBody(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BodyContext body() {
		BodyContext _localctx = new BodyContext(_ctx, State);
		EnterRule(_localctx, 8, RULE_body);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 77; Match(LCURLBRACKET);
			State = 81;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << INTType) | (1L << FLOATType) | (1L << CHARType) | (1L << BOOLType) | (1L << LIST) | (1L << IF) | (1L << RETURN))) != 0)) {
				{
				{
				State = 78; stmt();
				}
				}
				State = 83;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 84; Match(RCURLBRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StmtContext : ParserRuleContext {
		public IfStmtContext ifStmt() {
			return GetRuleContext<IfStmtContext>(0);
		}
		public VarDclContext varDcl() {
			return GetRuleContext<VarDclContext>(0);
		}
		public ITerminalNode EOS() { return GetToken(HaCSParser.EOS, 0); }
		public ReturnStmtContext returnStmt() {
			return GetRuleContext<ReturnStmtContext>(0);
		}
		public StmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IHaCSListener typedListener = listener as IHaCSListener;
			if (typedListener != null) typedListener.EnterStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IHaCSListener typedListener = listener as IHaCSListener;
			if (typedListener != null) typedListener.ExitStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHaCSVisitor<TResult> typedVisitor = visitor as IHaCSVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StmtContext stmt() {
		StmtContext _localctx = new StmtContext(_ctx, State);
		EnterRule(_localctx, 10, RULE_stmt);
		try {
			State = 93;
			switch (_input.La(1)) {
			case IF:
				EnterOuterAlt(_localctx, 1);
				{
				State = 86; ifStmt();
				}
				break;
			case INTType:
			case FLOATType:
			case CHARType:
			case BOOLType:
			case LIST:
				EnterOuterAlt(_localctx, 2);
				{
				State = 87; varDcl();
				State = 88; Match(EOS);
				}
				break;
			case RETURN:
				EnterOuterAlt(_localctx, 3);
				{
				State = 90; returnStmt();
				State = 91; Match(EOS);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfStmtContext : ParserRuleContext {
		public ITerminalNode IF() { return GetToken(HaCSParser.IF, 0); }
		public ITerminalNode LPAREN() { return GetToken(HaCSParser.LPAREN, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode RPAREN() { return GetToken(HaCSParser.RPAREN, 0); }
		public BodyContext body() {
			return GetRuleContext<BodyContext>(0);
		}
		public ElseifStmtContext elseifStmt() {
			return GetRuleContext<ElseifStmtContext>(0);
		}
		public IfStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IHaCSListener typedListener = listener as IHaCSListener;
			if (typedListener != null) typedListener.EnterIfStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IHaCSListener typedListener = listener as IHaCSListener;
			if (typedListener != null) typedListener.ExitIfStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHaCSVisitor<TResult> typedVisitor = visitor as IHaCSVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IfStmtContext ifStmt() {
		IfStmtContext _localctx = new IfStmtContext(_ctx, State);
		EnterRule(_localctx, 12, RULE_ifStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 95; Match(IF);
			State = 96; Match(LPAREN);
			State = 97; expression(0);
			State = 98; Match(RPAREN);
			State = 99; body();
			State = 100; elseifStmt();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ElseifStmtContext : ParserRuleContext {
		public ITerminalNode ELSEIF() { return GetToken(HaCSParser.ELSEIF, 0); }
		public ITerminalNode LPAREN() { return GetToken(HaCSParser.LPAREN, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode RPAREN() { return GetToken(HaCSParser.RPAREN, 0); }
		public BodyContext body() {
			return GetRuleContext<BodyContext>(0);
		}
		public ElseifStmtContext elseifStmt() {
			return GetRuleContext<ElseifStmtContext>(0);
		}
		public ElseStmtContext elseStmt() {
			return GetRuleContext<ElseStmtContext>(0);
		}
		public ElseifStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_elseifStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IHaCSListener typedListener = listener as IHaCSListener;
			if (typedListener != null) typedListener.EnterElseifStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IHaCSListener typedListener = listener as IHaCSListener;
			if (typedListener != null) typedListener.ExitElseifStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHaCSVisitor<TResult> typedVisitor = visitor as IHaCSVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElseifStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ElseifStmtContext elseifStmt() {
		ElseifStmtContext _localctx = new ElseifStmtContext(_ctx, State);
		EnterRule(_localctx, 14, RULE_elseifStmt);
		int _la;
		try {
			State = 112;
			switch (_input.La(1)) {
			case ELSEIF:
				EnterOuterAlt(_localctx, 1);
				{
				State = 102; Match(ELSEIF);
				State = 103; Match(LPAREN);
				State = 104; expression(0);
				State = 105; Match(RPAREN);
				State = 106; body();
				State = 107; elseifStmt();
				}
				break;
			case INTType:
			case FLOATType:
			case CHARType:
			case BOOLType:
			case LIST:
			case IF:
			case ELSE:
			case RETURN:
			case RCURLBRACKET:
				EnterOuterAlt(_localctx, 2);
				{
				State = 110;
				_la = _input.La(1);
				if (_la==ELSE) {
					{
					State = 109; elseStmt();
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ElseStmtContext : ParserRuleContext {
		public ITerminalNode ELSE() { return GetToken(HaCSParser.ELSE, 0); }
		public BodyContext body() {
			return GetRuleContext<BodyContext>(0);
		}
		public ElseStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_elseStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IHaCSListener typedListener = listener as IHaCSListener;
			if (typedListener != null) typedListener.EnterElseStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IHaCSListener typedListener = listener as IHaCSListener;
			if (typedListener != null) typedListener.ExitElseStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHaCSVisitor<TResult> typedVisitor = visitor as IHaCSVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElseStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ElseStmtContext elseStmt() {
		ElseStmtContext _localctx = new ElseStmtContext(_ctx, State);
		EnterRule(_localctx, 16, RULE_elseStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 114; Match(ELSE);
			State = 115; body();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VarDclContext : ParserRuleContext {
		public PrimitiveTypeContext primitiveType() {
			return GetRuleContext<PrimitiveTypeContext>(0);
		}
		public ITerminalNode IDENTIFIER() { return GetToken(HaCSParser.IDENTIFIER, 0); }
		public ITerminalNode ASSIGN() { return GetToken(HaCSParser.ASSIGN, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ListTypeContext listType() {
			return GetRuleContext<ListTypeContext>(0);
		}
		public ITerminalNode LCURLBRACKET() { return GetToken(HaCSParser.LCURLBRACKET, 0); }
		public ITerminalNode RCURLBRACKET() { return GetToken(HaCSParser.RCURLBRACKET, 0); }
		public ITerminalNode[] DELIMITER() { return GetTokens(HaCSParser.DELIMITER); }
		public ITerminalNode DELIMITER(int i) {
			return GetToken(HaCSParser.DELIMITER, i);
		}
		public VarDclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_varDcl; } }
		public override void EnterRule(IParseTreeListener listener) {
			IHaCSListener typedListener = listener as IHaCSListener;
			if (typedListener != null) typedListener.EnterVarDcl(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IHaCSListener typedListener = listener as IHaCSListener;
			if (typedListener != null) typedListener.ExitVarDcl(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHaCSVisitor<TResult> typedVisitor = visitor as IHaCSVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVarDcl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VarDclContext varDcl() {
		VarDclContext _localctx = new VarDclContext(_ctx, State);
		EnterRule(_localctx, 18, RULE_varDcl);
		int _la;
		try {
			State = 136;
			switch (_input.La(1)) {
			case INTType:
			case FLOATType:
			case CHARType:
			case BOOLType:
				EnterOuterAlt(_localctx, 1);
				{
				State = 117; primitiveType();
				State = 118; Match(IDENTIFIER);
				State = 119; Match(ASSIGN);
				State = 120; expression(0);
				}
				break;
			case LIST:
				EnterOuterAlt(_localctx, 2);
				{
				State = 122; listType();
				State = 123; Match(IDENTIFIER);
				State = 124; Match(ASSIGN);
				State = 125; Match(LCURLBRACKET);
				State = 126; expression(0);
				State = 131;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==DELIMITER) {
					{
					{
					State = 127; Match(DELIMITER);
					State = 128; expression(0);
					}
					}
					State = 133;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				State = 134; Match(RCURLBRACKET);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReturnStmtContext : ParserRuleContext {
		public ITerminalNode RETURN() { return GetToken(HaCSParser.RETURN, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ReturnStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_returnStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IHaCSListener typedListener = listener as IHaCSListener;
			if (typedListener != null) typedListener.EnterReturnStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IHaCSListener typedListener = listener as IHaCSListener;
			if (typedListener != null) typedListener.ExitReturnStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHaCSVisitor<TResult> typedVisitor = visitor as IHaCSVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReturnStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ReturnStmtContext returnStmt() {
		ReturnStmtContext _localctx = new ReturnStmtContext(_ctx, State);
		EnterRule(_localctx, 20, RULE_returnStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 138; Match(RETURN);
			State = 139; expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
	 
		public ExpressionContext() { }
		public virtual void CopyFrom(ExpressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class OrContext : ExpressionContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode OR() { return GetToken(HaCSParser.OR, 0); }
		public OrContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IHaCSListener typedListener = listener as IHaCSListener;
			if (typedListener != null) typedListener.EnterOr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IHaCSListener typedListener = listener as IHaCSListener;
			if (typedListener != null) typedListener.ExitOr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHaCSVisitor<TResult> typedVisitor = visitor as IHaCSVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExponentContext : ExpressionContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode EXP() { return GetToken(HaCSParser.EXP, 0); }
		public ExponentContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IHaCSListener typedListener = listener as IHaCSListener;
			if (typedListener != null) typedListener.EnterExponent(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IHaCSListener typedListener = listener as IHaCSListener;
			if (typedListener != null) typedListener.ExitExponent(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHaCSVisitor<TResult> typedVisitor = visitor as IHaCSVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExponent(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Arith2Context : ExpressionContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode MUL() { return GetToken(HaCSParser.MUL, 0); }
		public ITerminalNode DIV() { return GetToken(HaCSParser.DIV, 0); }
		public ITerminalNode MOD() { return GetToken(HaCSParser.MOD, 0); }
		public Arith2Context(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IHaCSListener typedListener = listener as IHaCSListener;
			if (typedListener != null) typedListener.EnterArith2(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IHaCSListener typedListener = listener as IHaCSListener;
			if (typedListener != null) typedListener.ExitArith2(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHaCSVisitor<TResult> typedVisitor = visitor as IHaCSVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArith2(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class FuncContext : ExpressionContext {
		public ITerminalNode IDENTIFIER() { return GetToken(HaCSParser.IDENTIFIER, 0); }
		public ITerminalNode LPAREN() { return GetToken(HaCSParser.LPAREN, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode RPAREN() { return GetToken(HaCSParser.RPAREN, 0); }
		public ITerminalNode[] DELIMITER() { return GetTokens(HaCSParser.DELIMITER); }
		public ITerminalNode DELIMITER(int i) {
			return GetToken(HaCSParser.DELIMITER, i);
		}
		public FuncContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IHaCSListener typedListener = listener as IHaCSListener;
			if (typedListener != null) typedListener.EnterFunc(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IHaCSListener typedListener = listener as IHaCSListener;
			if (typedListener != null) typedListener.ExitFunc(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHaCSVisitor<TResult> typedVisitor = visitor as IHaCSVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunc(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ParensContext : ExpressionContext {
		public ITerminalNode LPAREN() { return GetToken(HaCSParser.LPAREN, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode RPAREN() { return GetToken(HaCSParser.RPAREN, 0); }
		public ParensContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IHaCSListener typedListener = listener as IHaCSListener;
			if (typedListener != null) typedListener.EnterParens(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IHaCSListener typedListener = listener as IHaCSListener;
			if (typedListener != null) typedListener.ExitParens(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHaCSVisitor<TResult> typedVisitor = visitor as IHaCSVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParens(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VarContext : ExpressionContext {
		public ITerminalNode IDENTIFIER() { return GetToken(HaCSParser.IDENTIFIER, 0); }
		public VarContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IHaCSListener typedListener = listener as IHaCSListener;
			if (typedListener != null) typedListener.EnterVar(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IHaCSListener typedListener = listener as IHaCSListener;
			if (typedListener != null) typedListener.ExitVar(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHaCSVisitor<TResult> typedVisitor = visitor as IHaCSVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVar(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Arith1Context : ExpressionContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode ADD() { return GetToken(HaCSParser.ADD, 0); }
		public ITerminalNode SUB() { return GetToken(HaCSParser.SUB, 0); }
		public Arith1Context(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IHaCSListener typedListener = listener as IHaCSListener;
			if (typedListener != null) typedListener.EnterArith1(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IHaCSListener typedListener = listener as IHaCSListener;
			if (typedListener != null) typedListener.ExitArith1(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHaCSVisitor<TResult> typedVisitor = visitor as IHaCSVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArith1(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IncDecContext : ExpressionContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode INC() { return GetToken(HaCSParser.INC, 0); }
		public ITerminalNode DEC() { return GetToken(HaCSParser.DEC, 0); }
		public IncDecContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IHaCSListener typedListener = listener as IHaCSListener;
			if (typedListener != null) typedListener.EnterIncDec(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IHaCSListener typedListener = listener as IHaCSListener;
			if (typedListener != null) typedListener.ExitIncDec(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHaCSVisitor<TResult> typedVisitor = visitor as IHaCSVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIncDec(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AndContext : ExpressionContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode AND() { return GetToken(HaCSParser.AND, 0); }
		public AndContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IHaCSListener typedListener = listener as IHaCSListener;
			if (typedListener != null) typedListener.EnterAnd(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IHaCSListener typedListener = listener as IHaCSListener;
			if (typedListener != null) typedListener.ExitAnd(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHaCSVisitor<TResult> typedVisitor = visitor as IHaCSVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAnd(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LitContext : ExpressionContext {
		public LiteralContext literal() {
			return GetRuleContext<LiteralContext>(0);
		}
		public LitContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IHaCSListener typedListener = listener as IHaCSListener;
			if (typedListener != null) typedListener.EnterLit(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IHaCSListener typedListener = listener as IHaCSListener;
			if (typedListener != null) typedListener.ExitLit(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHaCSVisitor<TResult> typedVisitor = visitor as IHaCSVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLit(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class CompareContext : ExpressionContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode LE() { return GetToken(HaCSParser.LE, 0); }
		public ITerminalNode GE() { return GetToken(HaCSParser.GE, 0); }
		public ITerminalNode GT() { return GetToken(HaCSParser.GT, 0); }
		public ITerminalNode LT() { return GetToken(HaCSParser.LT, 0); }
		public CompareContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IHaCSListener typedListener = listener as IHaCSListener;
			if (typedListener != null) typedListener.EnterCompare(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IHaCSListener typedListener = listener as IHaCSListener;
			if (typedListener != null) typedListener.ExitCompare(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHaCSVisitor<TResult> typedVisitor = visitor as IHaCSVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCompare(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NegateContext : ExpressionContext {
		public ITerminalNode NEGATE() { return GetToken(HaCSParser.NEGATE, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public NegateContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IHaCSListener typedListener = listener as IHaCSListener;
			if (typedListener != null) typedListener.EnterNegate(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IHaCSListener typedListener = listener as IHaCSListener;
			if (typedListener != null) typedListener.ExitNegate(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHaCSVisitor<TResult> typedVisitor = visitor as IHaCSVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNegate(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class EqualityContext : ExpressionContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode EQ() { return GetToken(HaCSParser.EQ, 0); }
		public ITerminalNode NEQ() { return GetToken(HaCSParser.NEQ, 0); }
		public EqualityContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IHaCSListener typedListener = listener as IHaCSListener;
			if (typedListener != null) typedListener.EnterEquality(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IHaCSListener typedListener = listener as IHaCSListener;
			if (typedListener != null) typedListener.ExitEquality(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHaCSVisitor<TResult> typedVisitor = visitor as IHaCSVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEquality(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		return expression(0);
	}

	private ExpressionContext expression(int _p) {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = State;
		ExpressionContext _localctx = new ExpressionContext(_ctx, _parentState);
		ExpressionContext _prevctx = _localctx;
		int _startState = 22;
		EnterRecursionRule(_localctx, 22, RULE_expression, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 162;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,11,_ctx) ) {
			case 1:
				{
				_localctx = new ParensContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;

				State = 142; Match(LPAREN);
				State = 143; expression(0);
				State = 144; Match(RPAREN);
				}
				break;

			case 2:
				{
				_localctx = new NegateContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 146; Match(NEGATE);
				State = 147; expression(11);
				}
				break;

			case 3:
				{
				_localctx = new FuncContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 148; Match(IDENTIFIER);
				State = 149; Match(LPAREN);
				State = 150; expression(0);
				State = 155;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==DELIMITER) {
					{
					{
					State = 151; Match(DELIMITER);
					State = 152; expression(0);
					}
					}
					State = 157;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				State = 158; Match(RPAREN);
				}
				break;

			case 4:
				{
				_localctx = new LitContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 160; literal();
				}
				break;

			case 5:
				{
				_localctx = new VarContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 161; Match(IDENTIFIER);
				}
				break;
			}
			_ctx.stop = _input.Lt(-1);
			State = 189;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,13,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 187;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,12,_ctx) ) {
					case 1:
						{
						_localctx = new ExponentContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 164;
						if (!(Precpred(_ctx, 10))) throw new FailedPredicateException(this, "Precpred(_ctx, 10)");
						State = 165; Match(EXP);
						State = 166; expression(11);
						}
						break;

					case 2:
						{
						_localctx = new Arith2Context(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 167;
						if (!(Precpred(_ctx, 9))) throw new FailedPredicateException(this, "Precpred(_ctx, 9)");
						State = 168;
						_la = _input.La(1);
						if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << MUL) | (1L << DIV) | (1L << MOD))) != 0)) ) {
						_errHandler.RecoverInline(this);
						} else {
							Consume();
						}
						State = 169; expression(10);
						}
						break;

					case 3:
						{
						_localctx = new Arith1Context(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 170;
						if (!(Precpred(_ctx, 8))) throw new FailedPredicateException(this, "Precpred(_ctx, 8)");
						State = 171;
						_la = _input.La(1);
						if ( !(_la==ADD || _la==SUB) ) {
						_errHandler.RecoverInline(this);
						} else {
							Consume();
						}
						State = 172; expression(9);
						}
						break;

					case 4:
						{
						_localctx = new CompareContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 173;
						if (!(Precpred(_ctx, 7))) throw new FailedPredicateException(this, "Precpred(_ctx, 7)");
						State = 174;
						_la = _input.La(1);
						if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << GT) | (1L << GE) | (1L << LT) | (1L << LE))) != 0)) ) {
						_errHandler.RecoverInline(this);
						} else {
							Consume();
						}
						State = 175; expression(8);
						}
						break;

					case 5:
						{
						_localctx = new EqualityContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 176;
						if (!(Precpred(_ctx, 6))) throw new FailedPredicateException(this, "Precpred(_ctx, 6)");
						State = 177;
						_la = _input.La(1);
						if ( !(_la==EQ || _la==NEQ) ) {
						_errHandler.RecoverInline(this);
						} else {
							Consume();
						}
						State = 178; expression(7);
						}
						break;

					case 6:
						{
						_localctx = new AndContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 179;
						if (!(Precpred(_ctx, 5))) throw new FailedPredicateException(this, "Precpred(_ctx, 5)");
						State = 180; Match(AND);
						State = 181; expression(6);
						}
						break;

					case 7:
						{
						_localctx = new OrContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 182;
						if (!(Precpred(_ctx, 4))) throw new FailedPredicateException(this, "Precpred(_ctx, 4)");
						State = 183; Match(OR);
						State = 184; expression(5);
						}
						break;

					case 8:
						{
						_localctx = new IncDecContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 185;
						if (!(Precpred(_ctx, 12))) throw new FailedPredicateException(this, "Precpred(_ctx, 12)");
						State = 186;
						_la = _input.La(1);
						if ( !(_la==INC || _la==DEC) ) {
						_errHandler.RecoverInline(this);
						} else {
							Consume();
						}
						}
						break;
					}
					} 
				}
				State = 191;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,13,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class TypeContext : ParserRuleContext {
		public PrimitiveTypeContext primitiveType() {
			return GetRuleContext<PrimitiveTypeContext>(0);
		}
		public ListTypeContext listType() {
			return GetRuleContext<ListTypeContext>(0);
		}
		public TypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type; } }
		public override void EnterRule(IParseTreeListener listener) {
			IHaCSListener typedListener = listener as IHaCSListener;
			if (typedListener != null) typedListener.EnterType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IHaCSListener typedListener = listener as IHaCSListener;
			if (typedListener != null) typedListener.ExitType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHaCSVisitor<TResult> typedVisitor = visitor as IHaCSVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeContext type() {
		TypeContext _localctx = new TypeContext(_ctx, State);
		EnterRule(_localctx, 24, RULE_type);
		try {
			State = 194;
			switch (_input.La(1)) {
			case INTType:
			case FLOATType:
			case CHARType:
			case BOOLType:
				EnterOuterAlt(_localctx, 1);
				{
				State = 192; primitiveType();
				}
				break;
			case LIST:
				EnterOuterAlt(_localctx, 2);
				{
				State = 193; listType();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrimitiveTypeContext : ParserRuleContext {
		public ITerminalNode INTType() { return GetToken(HaCSParser.INTType, 0); }
		public ITerminalNode CHARType() { return GetToken(HaCSParser.CHARType, 0); }
		public ITerminalNode FLOATType() { return GetToken(HaCSParser.FLOATType, 0); }
		public ITerminalNode BOOLType() { return GetToken(HaCSParser.BOOLType, 0); }
		public PrimitiveTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_primitiveType; } }
		public override void EnterRule(IParseTreeListener listener) {
			IHaCSListener typedListener = listener as IHaCSListener;
			if (typedListener != null) typedListener.EnterPrimitiveType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IHaCSListener typedListener = listener as IHaCSListener;
			if (typedListener != null) typedListener.ExitPrimitiveType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHaCSVisitor<TResult> typedVisitor = visitor as IHaCSVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrimitiveType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrimitiveTypeContext primitiveType() {
		PrimitiveTypeContext _localctx = new PrimitiveTypeContext(_ctx, State);
		EnterRule(_localctx, 26, RULE_primitiveType);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 196;
			_la = _input.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << INTType) | (1L << FLOATType) | (1L << CHARType) | (1L << BOOLType))) != 0)) ) {
			_errHandler.RecoverInline(this);
			} else {
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ListTypeContext : ParserRuleContext {
		public ITerminalNode LIST() { return GetToken(HaCSParser.LIST, 0); }
		public ITerminalNode LT() { return GetToken(HaCSParser.LT, 0); }
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public ITerminalNode GT() { return GetToken(HaCSParser.GT, 0); }
		public ListTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_listType; } }
		public override void EnterRule(IParseTreeListener listener) {
			IHaCSListener typedListener = listener as IHaCSListener;
			if (typedListener != null) typedListener.EnterListType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IHaCSListener typedListener = listener as IHaCSListener;
			if (typedListener != null) typedListener.ExitListType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHaCSVisitor<TResult> typedVisitor = visitor as IHaCSVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitListType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ListTypeContext listType() {
		ListTypeContext _localctx = new ListTypeContext(_ctx, State);
		EnterRule(_localctx, 28, RULE_listType);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 198; Match(LIST);
			State = 199; Match(LT);
			State = 200; type();
			State = 201; Match(GT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LiteralContext : ParserRuleContext {
		public ITerminalNode INT() { return GetToken(HaCSParser.INT, 0); }
		public ITerminalNode FLOAT() { return GetToken(HaCSParser.FLOAT, 0); }
		public ITerminalNode CHAR() { return GetToken(HaCSParser.CHAR, 0); }
		public ITerminalNode BOOL() { return GetToken(HaCSParser.BOOL, 0); }
		public LiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_literal; } }
		public override void EnterRule(IParseTreeListener listener) {
			IHaCSListener typedListener = listener as IHaCSListener;
			if (typedListener != null) typedListener.EnterLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IHaCSListener typedListener = listener as IHaCSListener;
			if (typedListener != null) typedListener.ExitLiteral(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHaCSVisitor<TResult> typedVisitor = visitor as IHaCSVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LiteralContext literal() {
		LiteralContext _localctx = new LiteralContext(_ctx, State);
		EnterRule(_localctx, 30, RULE_literal);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 203;
			_la = _input.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << INT) | (1L << FLOAT) | (1L << CHAR) | (1L << BOOL))) != 0)) ) {
			_errHandler.RecoverInline(this);
			} else {
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CompileUnitContext : ParserRuleContext {
		public ITerminalNode Eof() { return GetToken(HaCSParser.Eof, 0); }
		public CompileUnitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_compileUnit; } }
		public override void EnterRule(IParseTreeListener listener) {
			IHaCSListener typedListener = listener as IHaCSListener;
			if (typedListener != null) typedListener.EnterCompileUnit(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IHaCSListener typedListener = listener as IHaCSListener;
			if (typedListener != null) typedListener.ExitCompileUnit(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHaCSVisitor<TResult> typedVisitor = visitor as IHaCSVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCompileUnit(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CompileUnitContext compileUnit() {
		CompileUnitContext _localctx = new CompileUnitContext(_ctx, State);
		EnterRule(_localctx, 32, RULE_compileUnit);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 205; Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 11: return expression_sempred((ExpressionContext)_localctx, predIndex);
		}
		return true;
	}
	private bool expression_sempred(ExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(_ctx, 10);

		case 1: return Precpred(_ctx, 9);

		case 2: return Precpred(_ctx, 8);

		case 3: return Precpred(_ctx, 7);

		case 4: return Precpred(_ctx, 6);

		case 5: return Precpred(_ctx, 5);

		case 6: return Precpred(_ctx, 4);

		case 7: return Precpred(_ctx, 12);
		}
		return true;
	}

	public static readonly string _serializedATN =
		"\x3\xAF6F\x8320\x479D\xB75C\x4880\x1605\x191C\xAB37\x3/\xD2\x4\x2\t\x2"+
		"\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6\x4\a\t\a\x4\b\t\b\x4\t\t"+
		"\t\x4\n\t\n\x4\v\t\v\x4\f\t\f\x4\r\t\r\x4\xE\t\xE\x4\xF\t\xF\x4\x10\t"+
		"\x10\x4\x11\t\x11\x4\x12\t\x12\x3\x2\x3\x2\a\x2\'\n\x2\f\x2\xE\x2*\v\x2"+
		"\x3\x3\x3\x3\x3\x3\x3\x3\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\a\x4\x36"+
		"\n\x4\f\x4\xE\x4\x39\v\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\a"+
		"\x4\x42\n\x4\f\x4\xE\x4\x45\v\x4\x3\x4\x3\x4\x3\x4\x3\x4\x5\x4K\n\x4\x3"+
		"\x5\x3\x5\x3\x5\x3\x6\x3\x6\a\x6R\n\x6\f\x6\xE\x6U\v\x6\x3\x6\x3\x6\x3"+
		"\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x5\a`\n\a\x3\b\x3\b\x3\b\x3\b\x3\b\x3"+
		"\b\x3\b\x3\t\x3\t\x3\t\x3\t\x3\t\x3\t\x3\t\x3\t\x5\tq\n\t\x5\ts\n\t\x3"+
		"\n\x3\n\x3\n\x3\v\x3\v\x3\v\x3\v\x3\v\x3\v\x3\v\x3\v\x3\v\x3\v\x3\v\x3"+
		"\v\a\v\x84\n\v\f\v\xE\v\x87\v\v\x3\v\x3\v\x5\v\x8B\n\v\x3\f\x3\f\x3\f"+
		"\x3\r\x3\r\x3\r\x3\r\x3\r\x3\r\x3\r\x3\r\x3\r\x3\r\x3\r\x3\r\a\r\x9C\n"+
		"\r\f\r\xE\r\x9F\v\r\x3\r\x3\r\x3\r\x3\r\x5\r\xA5\n\r\x3\r\x3\r\x3\r\x3"+
		"\r\x3\r\x3\r\x3\r\x3\r\x3\r\x3\r\x3\r\x3\r\x3\r\x3\r\x3\r\x3\r\x3\r\x3"+
		"\r\x3\r\x3\r\x3\r\x3\r\x3\r\a\r\xBE\n\r\f\r\xE\r\xC1\v\r\x3\xE\x3\xE\x5"+
		"\xE\xC5\n\xE\x3\xF\x3\xF\x3\x10\x3\x10\x3\x10\x3\x10\x3\x10\x3\x11\x3"+
		"\x11\x3\x12\x3\x12\x3\x12\x2\x2\x3\x18\x13\x2\x2\x4\x2\x6\x2\b\x2\n\x2"+
		"\f\x2\xE\x2\x10\x2\x12\x2\x14\x2\x16\x2\x18\x2\x1A\x2\x1C\x2\x1E\x2 \x2"+
		"\"\x2\x2\t\x3\x2\x15\x17\x3\x2\x18\x19\x3\x2\x1E!\x3\x2\x1C\x1D\x3\x2"+
		"\x13\x14\x3\x2\a\n\x3\x2\x3\x6\xD9\x2$\x3\x2\x2\x2\x4+\x3\x2\x2\x2\x6"+
		"J\x3\x2\x2\x2\bL\x3\x2\x2\x2\nO\x3\x2\x2\x2\f_\x3\x2\x2\x2\xE\x61\x3\x2"+
		"\x2\x2\x10r\x3\x2\x2\x2\x12t\x3\x2\x2\x2\x14\x8A\x3\x2\x2\x2\x16\x8C\x3"+
		"\x2\x2\x2\x18\xA4\x3\x2\x2\x2\x1A\xC4\x3\x2\x2\x2\x1C\xC6\x3\x2\x2\x2"+
		"\x1E\xC8\x3\x2\x2\x2 \xCD\x3\x2\x2\x2\"\xCF\x3\x2\x2\x2$(\x5\x4\x3\x2"+
		"%\'\x5\x6\x4\x2&%\x3\x2\x2\x2\'*\x3\x2\x2\x2(&\x3\x2\x2\x2()\x3\x2\x2"+
		"\x2)\x3\x3\x2\x2\x2*(\x3\x2\x2\x2+,\a\a\x2\x2,-\a\f\x2\x2-.\x5\n\x6\x2"+
		".\x5\x3\x2\x2\x2/\x30\x5\x1A\xE\x2\x30\x31\a\x11\x2\x2\x31\x32\a$\x2\x2"+
		"\x32\x37\x5\b\x5\x2\x33\x34\a*\x2\x2\x34\x36\x5\b\x5\x2\x35\x33\x3\x2"+
		"\x2\x2\x36\x39\x3\x2\x2\x2\x37\x35\x3\x2\x2\x2\x37\x38\x3\x2\x2\x2\x38"+
		":\x3\x2\x2\x2\x39\x37\x3\x2\x2\x2:;\a%\x2\x2;<\x5\n\x6\x2<K\x3\x2\x2\x2"+
		"=>\a$\x2\x2>\x43\x5\b\x5\x2?@\a*\x2\x2@\x42\x5\b\x5\x2\x41?\x3\x2\x2\x2"+
		"\x42\x45\x3\x2\x2\x2\x43\x41\x3\x2\x2\x2\x43\x44\x3\x2\x2\x2\x44\x46\x3"+
		"\x2\x2\x2\x45\x43\x3\x2\x2\x2\x46G\a%\x2\x2GH\a,\x2\x2HI\x5\n\x6\x2IK"+
		"\x3\x2\x2\x2J/\x3\x2\x2\x2J=\x3\x2\x2\x2K\a\x3\x2\x2\x2LM\x5\x1A\xE\x2"+
		"MN\a\x11\x2\x2N\t\x3\x2\x2\x2OS\a(\x2\x2PR\x5\f\a\x2QP\x3\x2\x2\x2RU\x3"+
		"\x2\x2\x2SQ\x3\x2\x2\x2ST\x3\x2\x2\x2TV\x3\x2\x2\x2US\x3\x2\x2\x2VW\a"+
		")\x2\x2W\v\x3\x2\x2\x2X`\x5\xE\b\x2YZ\x5\x14\v\x2Z[\a+\x2\x2[`\x3\x2\x2"+
		"\x2\\]\x5\x16\f\x2]^\a+\x2\x2^`\x3\x2\x2\x2_X\x3\x2\x2\x2_Y\x3\x2\x2\x2"+
		"_\\\x3\x2\x2\x2`\r\x3\x2\x2\x2\x61\x62\a\r\x2\x2\x62\x63\a$\x2\x2\x63"+
		"\x64\x5\x18\r\x2\x64\x65\a%\x2\x2\x65\x66\x5\n\x6\x2\x66g\x5\x10\t\x2"+
		"g\xF\x3\x2\x2\x2hi\a\xE\x2\x2ij\a$\x2\x2jk\x5\x18\r\x2kl\a%\x2\x2lm\x5"+
		"\n\x6\x2mn\x5\x10\t\x2ns\x3\x2\x2\x2oq\x5\x12\n\x2po\x3\x2\x2\x2pq\x3"+
		"\x2\x2\x2qs\x3\x2\x2\x2rh\x3\x2\x2\x2rp\x3\x2\x2\x2s\x11\x3\x2\x2\x2t"+
		"u\a\xF\x2\x2uv\x5\n\x6\x2v\x13\x3\x2\x2\x2wx\x5\x1C\xF\x2xy\a\x11\x2\x2"+
		"yz\a#\x2\x2z{\x5\x18\r\x2{\x8B\x3\x2\x2\x2|}\x5\x1E\x10\x2}~\a\x11\x2"+
		"\x2~\x7F\a#\x2\x2\x7F\x80\a(\x2\x2\x80\x85\x5\x18\r\x2\x81\x82\a*\x2\x2"+
		"\x82\x84\x5\x18\r\x2\x83\x81\x3\x2\x2\x2\x84\x87\x3\x2\x2\x2\x85\x83\x3"+
		"\x2\x2\x2\x85\x86\x3\x2\x2\x2\x86\x88\x3\x2\x2\x2\x87\x85\x3\x2\x2\x2"+
		"\x88\x89\a)\x2\x2\x89\x8B\x3\x2\x2\x2\x8Aw\x3\x2\x2\x2\x8A|\x3\x2\x2\x2"+
		"\x8B\x15\x3\x2\x2\x2\x8C\x8D\a\x10\x2\x2\x8D\x8E\x5\x18\r\x2\x8E\x17\x3"+
		"\x2\x2\x2\x8F\x90\b\r\x1\x2\x90\x91\a$\x2\x2\x91\x92\x5\x18\r\x2\x92\x93"+
		"\a%\x2\x2\x93\xA5\x3\x2\x2\x2\x94\x95\a\"\x2\x2\x95\xA5\x5\x18\r\r\x96"+
		"\x97\a\x11\x2\x2\x97\x98\a$\x2\x2\x98\x9D\x5\x18\r\x2\x99\x9A\a*\x2\x2"+
		"\x9A\x9C\x5\x18\r\x2\x9B\x99\x3\x2\x2\x2\x9C\x9F\x3\x2\x2\x2\x9D\x9B\x3"+
		"\x2\x2\x2\x9D\x9E\x3\x2\x2\x2\x9E\xA0\x3\x2\x2\x2\x9F\x9D\x3\x2\x2\x2"+
		"\xA0\xA1\a%\x2\x2\xA1\xA5\x3\x2\x2\x2\xA2\xA5\x5 \x11\x2\xA3\xA5\a\x11"+
		"\x2\x2\xA4\x8F\x3\x2\x2\x2\xA4\x94\x3\x2\x2\x2\xA4\x96\x3\x2\x2\x2\xA4"+
		"\xA2\x3\x2\x2\x2\xA4\xA3\x3\x2\x2\x2\xA5\xBF\x3\x2\x2\x2\xA6\xA7\f\f\x2"+
		"\x2\xA7\xA8\a\x12\x2\x2\xA8\xBE\x5\x18\r\r\xA9\xAA\f\v\x2\x2\xAA\xAB\t"+
		"\x2\x2\x2\xAB\xBE\x5\x18\r\f\xAC\xAD\f\n\x2\x2\xAD\xAE\t\x3\x2\x2\xAE"+
		"\xBE\x5\x18\r\v\xAF\xB0\f\t\x2\x2\xB0\xB1\t\x4\x2\x2\xB1\xBE\x5\x18\r"+
		"\n\xB2\xB3\f\b\x2\x2\xB3\xB4\t\x5\x2\x2\xB4\xBE\x5\x18\r\t\xB5\xB6\f\a"+
		"\x2\x2\xB6\xB7\a\x1A\x2\x2\xB7\xBE\x5\x18\r\b\xB8\xB9\f\x6\x2\x2\xB9\xBA"+
		"\a\x1B\x2\x2\xBA\xBE\x5\x18\r\a\xBB\xBC\f\xE\x2\x2\xBC\xBE\t\x6\x2\x2"+
		"\xBD\xA6\x3\x2\x2\x2\xBD\xA9\x3\x2\x2\x2\xBD\xAC\x3\x2\x2\x2\xBD\xAF\x3"+
		"\x2\x2\x2\xBD\xB2\x3\x2\x2\x2\xBD\xB5\x3\x2\x2\x2\xBD\xB8\x3\x2\x2\x2"+
		"\xBD\xBB\x3\x2\x2\x2\xBE\xC1\x3\x2\x2\x2\xBF\xBD\x3\x2\x2\x2\xBF\xC0\x3"+
		"\x2\x2\x2\xC0\x19\x3\x2\x2\x2\xC1\xBF\x3\x2\x2\x2\xC2\xC5\x5\x1C\xF\x2"+
		"\xC3\xC5\x5\x1E\x10\x2\xC4\xC2\x3\x2\x2\x2\xC4\xC3\x3\x2\x2\x2\xC5\x1B"+
		"\x3\x2\x2\x2\xC6\xC7\t\a\x2\x2\xC7\x1D\x3\x2\x2\x2\xC8\xC9\a\v\x2\x2\xC9"+
		"\xCA\a \x2\x2\xCA\xCB\x5\x1A\xE\x2\xCB\xCC\a\x1E\x2\x2\xCC\x1F\x3\x2\x2"+
		"\x2\xCD\xCE\t\b\x2\x2\xCE!\x3\x2\x2\x2\xCF\xD0\a\x2\x2\x3\xD0#\x3\x2\x2"+
		"\x2\x11(\x37\x43JS_pr\x85\x8A\x9D\xA4\xBD\xBF\xC4";
	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
} // namespace HaCS
