//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.5.3
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from c:\Users\grypetersen\documents\visual studio 2015\Projects\HaCS\HaCS\HaCS.g4 by ANTLR 4.5.3

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace HaCS {
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using System.Collections.Generic;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.5.3")]
[System.CLSCompliant(false)]
public partial class HaCSParser : Parser {
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, T__12=13, INT=14, FLOAT=15, CHAR=16, BOOL=17, 
		IDENTIFIER=18, MUL=19, DIV=20, MOD=21, ADD=22, SUB=23, AND=24, OR=25, 
		EQ=26, NEQ=27, GT=28, GE=29, LT=30, LE=31, NEGATE=32, ASSIGN=33, LPAREN=34, 
		RPAREN=35, LBRACKET=36, RBRACKET=37, LCURLBRACKET=38, RCURLBRACKET=39, 
		DELIMITER=40, EOS=41, LAMBDA=42, WS=43, COMMENT=44, LINE_COMMENT=45;
	public const int
		RULE_program = 0, RULE_main = 1, RULE_functionDecl = 2, RULE_formalParam = 3, 
		RULE_body = 4, RULE_stmt = 5, RULE_ifStmt = 6, RULE_elseifStmt = 7, RULE_elseStmt = 8, 
		RULE_varDcl = 9, RULE_returnStmt = 10, RULE_expression = 11, RULE_funcCall = 12, 
		RULE_type = 13, RULE_primitiveType = 14, RULE_listType = 15, RULE_literal = 16, 
		RULE_compileUnit = 17;
	public static readonly string[] ruleNames = {
		"program", "main", "functionDecl", "formalParam", "body", "stmt", "ifStmt", 
		"elseifStmt", "elseStmt", "varDcl", "returnStmt", "expression", "funcCall", 
		"type", "primitiveType", "listType", "literal", "compileUnit"
	};

	private static readonly string[] _LiteralNames = {
		null, "'int'", "'main'", "'if'", "'elseif'", "'else'", "'return'", "'++'", 
		"'--'", "'^'", "'char'", "'float'", "'bool'", "'List'", null, null, null, 
		null, null, "'*'", "'/'", "'%'", "'+'", "'-'", "'&&'", "'||'", "'=='", 
		"'!='", "'>'", "'>='", "'<'", "'<='", "'!'", "'='", "'('", "')'", "'['", 
		"']'", "'{'", "'}'", "','", "';'", "'=>'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, "INT", "FLOAT", "CHAR", "BOOL", "IDENTIFIER", "MUL", "DIV", 
		"MOD", "ADD", "SUB", "AND", "OR", "EQ", "NEQ", "GT", "GE", "LT", "LE", 
		"NEGATE", "ASSIGN", "LPAREN", "RPAREN", "LBRACKET", "RBRACKET", "LCURLBRACKET", 
		"RCURLBRACKET", "DELIMITER", "EOS", "LAMBDA", "WS", "COMMENT", "LINE_COMMENT"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[System.Obsolete("Use Vocabulary instead.")]
	public static readonly string[] tokenNames = GenerateTokenNames(DefaultVocabulary, _SymbolicNames.Length);

	private static string[] GenerateTokenNames(IVocabulary vocabulary, int length) {
		string[] tokenNames = new string[length];
		for (int i = 0; i < tokenNames.Length; i++) {
			tokenNames[i] = vocabulary.GetLiteralName(i);
			if (tokenNames[i] == null) {
				tokenNames[i] = vocabulary.GetSymbolicName(i);
			}

			if (tokenNames[i] == null) {
				tokenNames[i] = "<INVALID>";
			}
		}

		return tokenNames;
	}

	[System.Obsolete]
	public override string[] TokenNames
	{
		get
		{
			return tokenNames;
		}
	}

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "HaCS.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }


		protected const int EOF = Eof;

	public HaCSParser(ITokenStream input)
		: base(input)
	{
		_interp = new ParserATNSimulator(this,_ATN);
	}
	public partial class ProgramContext : ParserRuleContext {
		public MainContext main() {
			return GetRuleContext<MainContext>(0);
		}
		public FunctionDeclContext[] functionDecl() {
			return GetRuleContexts<FunctionDeclContext>();
		}
		public FunctionDeclContext functionDecl(int i) {
			return GetRuleContext<FunctionDeclContext>(i);
		}
		public ProgramContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_program; } }
		public override void EnterRule(IParseTreeListener listener) {
			IHaCSListener typedListener = listener as IHaCSListener;
			if (typedListener != null) typedListener.EnterProgram(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IHaCSListener typedListener = listener as IHaCSListener;
			if (typedListener != null) typedListener.ExitProgram(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHaCSVisitor<TResult> typedVisitor = visitor as IHaCSVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProgram(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProgramContext program() {
		ProgramContext _localctx = new ProgramContext(_ctx, State);
		EnterRule(_localctx, 0, RULE_program);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 36; main();
			State = 40;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << T__9) | (1L << T__10) | (1L << T__11) | (1L << T__12) | (1L << LPAREN))) != 0)) {
				{
				{
				State = 37; functionDecl();
				}
				}
				State = 42;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MainContext : ParserRuleContext {
		public ITerminalNode LPAREN() { return GetToken(HaCSParser.LPAREN, 0); }
		public FormalParamContext[] formalParam() {
			return GetRuleContexts<FormalParamContext>();
		}
		public FormalParamContext formalParam(int i) {
			return GetRuleContext<FormalParamContext>(i);
		}
		public ITerminalNode RPAREN() { return GetToken(HaCSParser.RPAREN, 0); }
		public BodyContext body() {
			return GetRuleContext<BodyContext>(0);
		}
		public ITerminalNode[] DELIMITER() { return GetTokens(HaCSParser.DELIMITER); }
		public ITerminalNode DELIMITER(int i) {
			return GetToken(HaCSParser.DELIMITER, i);
		}
		public MainContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_main; } }
		public override void EnterRule(IParseTreeListener listener) {
			IHaCSListener typedListener = listener as IHaCSListener;
			if (typedListener != null) typedListener.EnterMain(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IHaCSListener typedListener = listener as IHaCSListener;
			if (typedListener != null) typedListener.ExitMain(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHaCSVisitor<TResult> typedVisitor = visitor as IHaCSVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMain(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MainContext main() {
		MainContext _localctx = new MainContext(_ctx, State);
		EnterRule(_localctx, 2, RULE_main);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 43; Match(T__0);
			State = 44; Match(T__1);
			State = 45; Match(LPAREN);
			State = 46; formalParam();
			State = 51;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==DELIMITER) {
				{
				{
				State = 47; Match(DELIMITER);
				State = 48; formalParam();
				}
				}
				State = 53;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 54; Match(RPAREN);
			State = 55; body();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionDeclContext : ParserRuleContext {
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public ITerminalNode IDENTIFIER() { return GetToken(HaCSParser.IDENTIFIER, 0); }
		public ITerminalNode LPAREN() { return GetToken(HaCSParser.LPAREN, 0); }
		public FormalParamContext[] formalParam() {
			return GetRuleContexts<FormalParamContext>();
		}
		public FormalParamContext formalParam(int i) {
			return GetRuleContext<FormalParamContext>(i);
		}
		public ITerminalNode RPAREN() { return GetToken(HaCSParser.RPAREN, 0); }
		public BodyContext body() {
			return GetRuleContext<BodyContext>(0);
		}
		public ITerminalNode[] DELIMITER() { return GetTokens(HaCSParser.DELIMITER); }
		public ITerminalNode DELIMITER(int i) {
			return GetToken(HaCSParser.DELIMITER, i);
		}
		public ITerminalNode LAMBDA() { return GetToken(HaCSParser.LAMBDA, 0); }
		public FunctionDeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionDecl; } }
		public override void EnterRule(IParseTreeListener listener) {
			IHaCSListener typedListener = listener as IHaCSListener;
			if (typedListener != null) typedListener.EnterFunctionDecl(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IHaCSListener typedListener = listener as IHaCSListener;
			if (typedListener != null) typedListener.ExitFunctionDecl(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHaCSVisitor<TResult> typedVisitor = visitor as IHaCSVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionDecl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionDeclContext functionDecl() {
		FunctionDeclContext _localctx = new FunctionDeclContext(_ctx, State);
		EnterRule(_localctx, 4, RULE_functionDecl);
		int _la;
		try {
			State = 84;
			switch (_input.La(1)) {
			case T__0:
			case T__9:
			case T__10:
			case T__11:
			case T__12:
				EnterOuterAlt(_localctx, 1);
				{
				State = 57; type();
				State = 58; Match(IDENTIFIER);
				State = 59; Match(LPAREN);
				State = 60; formalParam();
				State = 65;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==DELIMITER) {
					{
					{
					State = 61; Match(DELIMITER);
					State = 62; formalParam();
					}
					}
					State = 67;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				State = 68; Match(RPAREN);
				State = 69; body();
				}
				break;
			case LPAREN:
				EnterOuterAlt(_localctx, 2);
				{
				State = 71; Match(LPAREN);
				State = 72; formalParam();
				State = 77;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==DELIMITER) {
					{
					{
					State = 73; Match(DELIMITER);
					State = 74; formalParam();
					}
					}
					State = 79;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				State = 80; Match(RPAREN);
				State = 81; Match(LAMBDA);
				State = 82; body();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FormalParamContext : ParserRuleContext {
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public ITerminalNode IDENTIFIER() { return GetToken(HaCSParser.IDENTIFIER, 0); }
		public FormalParamContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_formalParam; } }
		public override void EnterRule(IParseTreeListener listener) {
			IHaCSListener typedListener = listener as IHaCSListener;
			if (typedListener != null) typedListener.EnterFormalParam(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IHaCSListener typedListener = listener as IHaCSListener;
			if (typedListener != null) typedListener.ExitFormalParam(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHaCSVisitor<TResult> typedVisitor = visitor as IHaCSVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFormalParam(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FormalParamContext formalParam() {
		FormalParamContext _localctx = new FormalParamContext(_ctx, State);
		EnterRule(_localctx, 6, RULE_formalParam);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 86; type();
			State = 87; Match(IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BodyContext : ParserRuleContext {
		public ITerminalNode LCURLBRACKET() { return GetToken(HaCSParser.LCURLBRACKET, 0); }
		public ITerminalNode RCURLBRACKET() { return GetToken(HaCSParser.RCURLBRACKET, 0); }
		public StmtContext[] stmt() {
			return GetRuleContexts<StmtContext>();
		}
		public StmtContext stmt(int i) {
			return GetRuleContext<StmtContext>(i);
		}
		public BodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_body; } }
		public override void EnterRule(IParseTreeListener listener) {
			IHaCSListener typedListener = listener as IHaCSListener;
			if (typedListener != null) typedListener.EnterBody(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IHaCSListener typedListener = listener as IHaCSListener;
			if (typedListener != null) typedListener.ExitBody(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHaCSVisitor<TResult> typedVisitor = visitor as IHaCSVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBody(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BodyContext body() {
		BodyContext _localctx = new BodyContext(_ctx, State);
		EnterRule(_localctx, 8, RULE_body);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 89; Match(LCURLBRACKET);
			State = 93;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << T__2) | (1L << T__5) | (1L << T__9) | (1L << T__10) | (1L << T__11) | (1L << T__12))) != 0)) {
				{
				{
				State = 90; stmt();
				}
				}
				State = 95;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 96; Match(RCURLBRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StmtContext : ParserRuleContext {
		public IfStmtContext ifStmt() {
			return GetRuleContext<IfStmtContext>(0);
		}
		public VarDclContext varDcl() {
			return GetRuleContext<VarDclContext>(0);
		}
		public ITerminalNode EOS() { return GetToken(HaCSParser.EOS, 0); }
		public ReturnStmtContext returnStmt() {
			return GetRuleContext<ReturnStmtContext>(0);
		}
		public StmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IHaCSListener typedListener = listener as IHaCSListener;
			if (typedListener != null) typedListener.EnterStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IHaCSListener typedListener = listener as IHaCSListener;
			if (typedListener != null) typedListener.ExitStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHaCSVisitor<TResult> typedVisitor = visitor as IHaCSVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StmtContext stmt() {
		StmtContext _localctx = new StmtContext(_ctx, State);
		EnterRule(_localctx, 10, RULE_stmt);
		try {
			State = 105;
			switch (_input.La(1)) {
			case T__2:
				EnterOuterAlt(_localctx, 1);
				{
				State = 98; ifStmt();
				}
				break;
			case T__0:
			case T__9:
			case T__10:
			case T__11:
			case T__12:
				EnterOuterAlt(_localctx, 2);
				{
				State = 99; varDcl();
				State = 100; Match(EOS);
				}
				break;
			case T__5:
				EnterOuterAlt(_localctx, 3);
				{
				State = 102; returnStmt();
				State = 103; Match(EOS);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfStmtContext : ParserRuleContext {
		public ITerminalNode LPAREN() { return GetToken(HaCSParser.LPAREN, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode RPAREN() { return GetToken(HaCSParser.RPAREN, 0); }
		public BodyContext body() {
			return GetRuleContext<BodyContext>(0);
		}
		public ElseifStmtContext elseifStmt() {
			return GetRuleContext<ElseifStmtContext>(0);
		}
		public IfStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IHaCSListener typedListener = listener as IHaCSListener;
			if (typedListener != null) typedListener.EnterIfStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IHaCSListener typedListener = listener as IHaCSListener;
			if (typedListener != null) typedListener.ExitIfStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHaCSVisitor<TResult> typedVisitor = visitor as IHaCSVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IfStmtContext ifStmt() {
		IfStmtContext _localctx = new IfStmtContext(_ctx, State);
		EnterRule(_localctx, 12, RULE_ifStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 107; Match(T__2);
			State = 108; Match(LPAREN);
			State = 109; expression(0);
			State = 110; Match(RPAREN);
			State = 111; body();
			State = 112; elseifStmt();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ElseifStmtContext : ParserRuleContext {
		public ITerminalNode LPAREN() { return GetToken(HaCSParser.LPAREN, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode RPAREN() { return GetToken(HaCSParser.RPAREN, 0); }
		public BodyContext body() {
			return GetRuleContext<BodyContext>(0);
		}
		public ElseifStmtContext elseifStmt() {
			return GetRuleContext<ElseifStmtContext>(0);
		}
		public ElseStmtContext elseStmt() {
			return GetRuleContext<ElseStmtContext>(0);
		}
		public ElseifStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_elseifStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IHaCSListener typedListener = listener as IHaCSListener;
			if (typedListener != null) typedListener.EnterElseifStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IHaCSListener typedListener = listener as IHaCSListener;
			if (typedListener != null) typedListener.ExitElseifStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHaCSVisitor<TResult> typedVisitor = visitor as IHaCSVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElseifStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ElseifStmtContext elseifStmt() {
		ElseifStmtContext _localctx = new ElseifStmtContext(_ctx, State);
		EnterRule(_localctx, 14, RULE_elseifStmt);
		int _la;
		try {
			State = 124;
			switch (_input.La(1)) {
			case T__3:
				EnterOuterAlt(_localctx, 1);
				{
				State = 114; Match(T__3);
				State = 115; Match(LPAREN);
				State = 116; expression(0);
				State = 117; Match(RPAREN);
				State = 118; body();
				State = 119; elseifStmt();
				}
				break;
			case T__0:
			case T__2:
			case T__4:
			case T__5:
			case T__9:
			case T__10:
			case T__11:
			case T__12:
			case RCURLBRACKET:
				EnterOuterAlt(_localctx, 2);
				{
				State = 122;
				_la = _input.La(1);
				if (_la==T__4) {
					{
					State = 121; elseStmt();
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ElseStmtContext : ParserRuleContext {
		public BodyContext body() {
			return GetRuleContext<BodyContext>(0);
		}
		public ElseStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_elseStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IHaCSListener typedListener = listener as IHaCSListener;
			if (typedListener != null) typedListener.EnterElseStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IHaCSListener typedListener = listener as IHaCSListener;
			if (typedListener != null) typedListener.ExitElseStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHaCSVisitor<TResult> typedVisitor = visitor as IHaCSVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElseStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ElseStmtContext elseStmt() {
		ElseStmtContext _localctx = new ElseStmtContext(_ctx, State);
		EnterRule(_localctx, 16, RULE_elseStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 126; Match(T__4);
			State = 127; body();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VarDclContext : ParserRuleContext {
		public PrimitiveTypeContext primitiveType() {
			return GetRuleContext<PrimitiveTypeContext>(0);
		}
		public ITerminalNode IDENTIFIER() { return GetToken(HaCSParser.IDENTIFIER, 0); }
		public ITerminalNode ASSIGN() { return GetToken(HaCSParser.ASSIGN, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ListTypeContext listType() {
			return GetRuleContext<ListTypeContext>(0);
		}
		public ITerminalNode LCURLBRACKET() { return GetToken(HaCSParser.LCURLBRACKET, 0); }
		public ITerminalNode RCURLBRACKET() { return GetToken(HaCSParser.RCURLBRACKET, 0); }
		public ITerminalNode[] DELIMITER() { return GetTokens(HaCSParser.DELIMITER); }
		public ITerminalNode DELIMITER(int i) {
			return GetToken(HaCSParser.DELIMITER, i);
		}
		public VarDclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_varDcl; } }
		public override void EnterRule(IParseTreeListener listener) {
			IHaCSListener typedListener = listener as IHaCSListener;
			if (typedListener != null) typedListener.EnterVarDcl(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IHaCSListener typedListener = listener as IHaCSListener;
			if (typedListener != null) typedListener.ExitVarDcl(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHaCSVisitor<TResult> typedVisitor = visitor as IHaCSVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVarDcl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VarDclContext varDcl() {
		VarDclContext _localctx = new VarDclContext(_ctx, State);
		EnterRule(_localctx, 18, RULE_varDcl);
		int _la;
		try {
			State = 148;
			switch (_input.La(1)) {
			case T__0:
			case T__9:
			case T__10:
			case T__11:
				EnterOuterAlt(_localctx, 1);
				{
				State = 129; primitiveType();
				State = 130; Match(IDENTIFIER);
				State = 131; Match(ASSIGN);
				State = 132; expression(0);
				}
				break;
			case T__12:
				EnterOuterAlt(_localctx, 2);
				{
				State = 134; listType();
				State = 135; Match(IDENTIFIER);
				State = 136; Match(ASSIGN);
				State = 137; Match(LCURLBRACKET);
				State = 138; expression(0);
				State = 143;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==DELIMITER) {
					{
					{
					State = 139; Match(DELIMITER);
					State = 140; expression(0);
					}
					}
					State = 145;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				State = 146; Match(RCURLBRACKET);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReturnStmtContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ReturnStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_returnStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IHaCSListener typedListener = listener as IHaCSListener;
			if (typedListener != null) typedListener.EnterReturnStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IHaCSListener typedListener = listener as IHaCSListener;
			if (typedListener != null) typedListener.ExitReturnStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHaCSVisitor<TResult> typedVisitor = visitor as IHaCSVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReturnStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ReturnStmtContext returnStmt() {
		ReturnStmtContext _localctx = new ReturnStmtContext(_ctx, State);
		EnterRule(_localctx, 20, RULE_returnStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 150; Match(T__5);
			State = 151; expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		public ITerminalNode LPAREN() { return GetToken(HaCSParser.LPAREN, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode RPAREN() { return GetToken(HaCSParser.RPAREN, 0); }
		public ITerminalNode NEGATE() { return GetToken(HaCSParser.NEGATE, 0); }
		public ITerminalNode MUL() { return GetToken(HaCSParser.MUL, 0); }
		public ITerminalNode DIV() { return GetToken(HaCSParser.DIV, 0); }
		public ITerminalNode MOD() { return GetToken(HaCSParser.MOD, 0); }
		public ITerminalNode ADD() { return GetToken(HaCSParser.ADD, 0); }
		public ITerminalNode SUB() { return GetToken(HaCSParser.SUB, 0); }
		public ITerminalNode LE() { return GetToken(HaCSParser.LE, 0); }
		public ITerminalNode GE() { return GetToken(HaCSParser.GE, 0); }
		public ITerminalNode GT() { return GetToken(HaCSParser.GT, 0); }
		public ITerminalNode LT() { return GetToken(HaCSParser.LT, 0); }
		public ITerminalNode EQ() { return GetToken(HaCSParser.EQ, 0); }
		public ITerminalNode NEQ() { return GetToken(HaCSParser.NEQ, 0); }
		public ITerminalNode AND() { return GetToken(HaCSParser.AND, 0); }
		public ITerminalNode OR() { return GetToken(HaCSParser.OR, 0); }
		public FuncCallContext funcCall() {
			return GetRuleContext<FuncCallContext>(0);
		}
		public LiteralContext literal() {
			return GetRuleContext<LiteralContext>(0);
		}
		public ITerminalNode IDENTIFIER() { return GetToken(HaCSParser.IDENTIFIER, 0); }
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IHaCSListener typedListener = listener as IHaCSListener;
			if (typedListener != null) typedListener.EnterExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IHaCSListener typedListener = listener as IHaCSListener;
			if (typedListener != null) typedListener.ExitExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHaCSVisitor<TResult> typedVisitor = visitor as IHaCSVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		return expression(0);
	}

	private ExpressionContext expression(int _p) {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = State;
		ExpressionContext _localctx = new ExpressionContext(_ctx, _parentState);
		ExpressionContext _prevctx = _localctx;
		int _startState = 22;
		EnterRecursionRule(_localctx, 22, RULE_expression, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 163;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,11,_ctx) ) {
			case 1:
				{
				State = 154; Match(LPAREN);
				State = 155; expression(0);
				State = 156; Match(RPAREN);
				}
				break;

			case 2:
				{
				State = 158; Match(NEGATE);
				State = 159; expression(11);
				}
				break;

			case 3:
				{
				State = 160; funcCall();
				}
				break;

			case 4:
				{
				State = 161; literal();
				}
				break;

			case 5:
				{
				State = 162; Match(IDENTIFIER);
				}
				break;
			}
			_ctx.stop = _input.Lt(-1);
			State = 190;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,13,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 188;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,12,_ctx) ) {
					case 1:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 165;
						if (!(Precpred(_ctx, 10))) throw new FailedPredicateException(this, "Precpred(_ctx, 10)");
						State = 166; Match(T__8);
						State = 167; expression(11);
						}
						break;

					case 2:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 168;
						if (!(Precpred(_ctx, 9))) throw new FailedPredicateException(this, "Precpred(_ctx, 9)");
						State = 169;
						_la = _input.La(1);
						if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << MUL) | (1L << DIV) | (1L << MOD))) != 0)) ) {
						_errHandler.RecoverInline(this);
						} else {
							Consume();
						}
						State = 170; expression(10);
						}
						break;

					case 3:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 171;
						if (!(Precpred(_ctx, 8))) throw new FailedPredicateException(this, "Precpred(_ctx, 8)");
						State = 172;
						_la = _input.La(1);
						if ( !(_la==ADD || _la==SUB) ) {
						_errHandler.RecoverInline(this);
						} else {
							Consume();
						}
						State = 173; expression(9);
						}
						break;

					case 4:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 174;
						if (!(Precpred(_ctx, 7))) throw new FailedPredicateException(this, "Precpred(_ctx, 7)");
						State = 175;
						_la = _input.La(1);
						if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << GT) | (1L << GE) | (1L << LT) | (1L << LE))) != 0)) ) {
						_errHandler.RecoverInline(this);
						} else {
							Consume();
						}
						State = 176; expression(8);
						}
						break;

					case 5:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 177;
						if (!(Precpred(_ctx, 6))) throw new FailedPredicateException(this, "Precpred(_ctx, 6)");
						State = 178;
						_la = _input.La(1);
						if ( !(_la==EQ || _la==NEQ) ) {
						_errHandler.RecoverInline(this);
						} else {
							Consume();
						}
						State = 179; expression(7);
						}
						break;

					case 6:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 180;
						if (!(Precpred(_ctx, 5))) throw new FailedPredicateException(this, "Precpred(_ctx, 5)");
						State = 181; Match(AND);
						State = 182; expression(6);
						}
						break;

					case 7:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 183;
						if (!(Precpred(_ctx, 4))) throw new FailedPredicateException(this, "Precpred(_ctx, 4)");
						State = 184; Match(OR);
						State = 185; expression(5);
						}
						break;

					case 8:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 186;
						if (!(Precpred(_ctx, 12))) throw new FailedPredicateException(this, "Precpred(_ctx, 12)");
						State = 187;
						_la = _input.La(1);
						if ( !(_la==T__6 || _la==T__7) ) {
						_errHandler.RecoverInline(this);
						} else {
							Consume();
						}
						}
						break;
					}
					} 
				}
				State = 192;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,13,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class FuncCallContext : ParserRuleContext {
		public ITerminalNode[] IDENTIFIER() { return GetTokens(HaCSParser.IDENTIFIER); }
		public ITerminalNode IDENTIFIER(int i) {
			return GetToken(HaCSParser.IDENTIFIER, i);
		}
		public ITerminalNode LPAREN() { return GetToken(HaCSParser.LPAREN, 0); }
		public ITerminalNode RPAREN() { return GetToken(HaCSParser.RPAREN, 0); }
		public ITerminalNode[] DELIMITER() { return GetTokens(HaCSParser.DELIMITER); }
		public ITerminalNode DELIMITER(int i) {
			return GetToken(HaCSParser.DELIMITER, i);
		}
		public FuncCallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_funcCall; } }
		public override void EnterRule(IParseTreeListener listener) {
			IHaCSListener typedListener = listener as IHaCSListener;
			if (typedListener != null) typedListener.EnterFuncCall(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IHaCSListener typedListener = listener as IHaCSListener;
			if (typedListener != null) typedListener.ExitFuncCall(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHaCSVisitor<TResult> typedVisitor = visitor as IHaCSVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFuncCall(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FuncCallContext funcCall() {
		FuncCallContext _localctx = new FuncCallContext(_ctx, State);
		EnterRule(_localctx, 24, RULE_funcCall);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 193; Match(IDENTIFIER);
			State = 194; Match(LPAREN);
			State = 195; Match(IDENTIFIER);
			State = 200;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==DELIMITER) {
				{
				{
				State = 196; Match(DELIMITER);
				State = 197; Match(IDENTIFIER);
				}
				}
				State = 202;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 203; Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeContext : ParserRuleContext {
		public PrimitiveTypeContext primitiveType() {
			return GetRuleContext<PrimitiveTypeContext>(0);
		}
		public ListTypeContext listType() {
			return GetRuleContext<ListTypeContext>(0);
		}
		public TypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type; } }
		public override void EnterRule(IParseTreeListener listener) {
			IHaCSListener typedListener = listener as IHaCSListener;
			if (typedListener != null) typedListener.EnterType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IHaCSListener typedListener = listener as IHaCSListener;
			if (typedListener != null) typedListener.ExitType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHaCSVisitor<TResult> typedVisitor = visitor as IHaCSVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeContext type() {
		TypeContext _localctx = new TypeContext(_ctx, State);
		EnterRule(_localctx, 26, RULE_type);
		try {
			State = 207;
			switch (_input.La(1)) {
			case T__0:
			case T__9:
			case T__10:
			case T__11:
				EnterOuterAlt(_localctx, 1);
				{
				State = 205; primitiveType();
				}
				break;
			case T__12:
				EnterOuterAlt(_localctx, 2);
				{
				State = 206; listType();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrimitiveTypeContext : ParserRuleContext {
		public PrimitiveTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_primitiveType; } }
		public override void EnterRule(IParseTreeListener listener) {
			IHaCSListener typedListener = listener as IHaCSListener;
			if (typedListener != null) typedListener.EnterPrimitiveType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IHaCSListener typedListener = listener as IHaCSListener;
			if (typedListener != null) typedListener.ExitPrimitiveType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHaCSVisitor<TResult> typedVisitor = visitor as IHaCSVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrimitiveType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrimitiveTypeContext primitiveType() {
		PrimitiveTypeContext _localctx = new PrimitiveTypeContext(_ctx, State);
		EnterRule(_localctx, 28, RULE_primitiveType);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 209;
			_la = _input.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << T__9) | (1L << T__10) | (1L << T__11))) != 0)) ) {
			_errHandler.RecoverInline(this);
			} else {
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ListTypeContext : ParserRuleContext {
		public ITerminalNode LT() { return GetToken(HaCSParser.LT, 0); }
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public ITerminalNode GT() { return GetToken(HaCSParser.GT, 0); }
		public ListTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_listType; } }
		public override void EnterRule(IParseTreeListener listener) {
			IHaCSListener typedListener = listener as IHaCSListener;
			if (typedListener != null) typedListener.EnterListType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IHaCSListener typedListener = listener as IHaCSListener;
			if (typedListener != null) typedListener.ExitListType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHaCSVisitor<TResult> typedVisitor = visitor as IHaCSVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitListType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ListTypeContext listType() {
		ListTypeContext _localctx = new ListTypeContext(_ctx, State);
		EnterRule(_localctx, 30, RULE_listType);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 211; Match(T__12);
			State = 212; Match(LT);
			State = 213; type();
			State = 214; Match(GT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LiteralContext : ParserRuleContext {
		public ITerminalNode INT() { return GetToken(HaCSParser.INT, 0); }
		public ITerminalNode FLOAT() { return GetToken(HaCSParser.FLOAT, 0); }
		public ITerminalNode CHAR() { return GetToken(HaCSParser.CHAR, 0); }
		public ITerminalNode BOOL() { return GetToken(HaCSParser.BOOL, 0); }
		public LiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_literal; } }
		public override void EnterRule(IParseTreeListener listener) {
			IHaCSListener typedListener = listener as IHaCSListener;
			if (typedListener != null) typedListener.EnterLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IHaCSListener typedListener = listener as IHaCSListener;
			if (typedListener != null) typedListener.ExitLiteral(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHaCSVisitor<TResult> typedVisitor = visitor as IHaCSVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LiteralContext literal() {
		LiteralContext _localctx = new LiteralContext(_ctx, State);
		EnterRule(_localctx, 32, RULE_literal);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 216;
			_la = _input.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << INT) | (1L << FLOAT) | (1L << CHAR) | (1L << BOOL))) != 0)) ) {
			_errHandler.RecoverInline(this);
			} else {
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CompileUnitContext : ParserRuleContext {
		public ITerminalNode Eof() { return GetToken(HaCSParser.Eof, 0); }
		public CompileUnitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_compileUnit; } }
		public override void EnterRule(IParseTreeListener listener) {
			IHaCSListener typedListener = listener as IHaCSListener;
			if (typedListener != null) typedListener.EnterCompileUnit(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IHaCSListener typedListener = listener as IHaCSListener;
			if (typedListener != null) typedListener.ExitCompileUnit(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHaCSVisitor<TResult> typedVisitor = visitor as IHaCSVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCompileUnit(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CompileUnitContext compileUnit() {
		CompileUnitContext _localctx = new CompileUnitContext(_ctx, State);
		EnterRule(_localctx, 34, RULE_compileUnit);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 218; Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 11: return expression_sempred((ExpressionContext)_localctx, predIndex);
		}
		return true;
	}
	private bool expression_sempred(ExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(_ctx, 10);

		case 1: return Precpred(_ctx, 9);

		case 2: return Precpred(_ctx, 8);

		case 3: return Precpred(_ctx, 7);

		case 4: return Precpred(_ctx, 6);

		case 5: return Precpred(_ctx, 5);

		case 6: return Precpred(_ctx, 4);

		case 7: return Precpred(_ctx, 12);
		}
		return true;
	}

	public static readonly string _serializedATN =
		"\x3\xAF6F\x8320\x479D\xB75C\x4880\x1605\x191C\xAB37\x3/\xDF\x4\x2\t\x2"+
		"\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6\x4\a\t\a\x4\b\t\b\x4\t\t"+
		"\t\x4\n\t\n\x4\v\t\v\x4\f\t\f\x4\r\t\r\x4\xE\t\xE\x4\xF\t\xF\x4\x10\t"+
		"\x10\x4\x11\t\x11\x4\x12\t\x12\x4\x13\t\x13\x3\x2\x3\x2\a\x2)\n\x2\f\x2"+
		"\xE\x2,\v\x2\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\a\x3\x34\n\x3\f\x3\xE"+
		"\x3\x37\v\x3\x3\x3\x3\x3\x3\x3\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\a\x4"+
		"\x42\n\x4\f\x4\xE\x4\x45\v\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4"+
		"\a\x4N\n\x4\f\x4\xE\x4Q\v\x4\x3\x4\x3\x4\x3\x4\x3\x4\x5\x4W\n\x4\x3\x5"+
		"\x3\x5\x3\x5\x3\x6\x3\x6\a\x6^\n\x6\f\x6\xE\x6\x61\v\x6\x3\x6\x3\x6\x3"+
		"\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x5\al\n\a\x3\b\x3\b\x3\b\x3\b\x3\b\x3"+
		"\b\x3\b\x3\t\x3\t\x3\t\x3\t\x3\t\x3\t\x3\t\x3\t\x5\t}\n\t\x5\t\x7F\n\t"+
		"\x3\n\x3\n\x3\n\x3\v\x3\v\x3\v\x3\v\x3\v\x3\v\x3\v\x3\v\x3\v\x3\v\x3\v"+
		"\x3\v\a\v\x90\n\v\f\v\xE\v\x93\v\v\x3\v\x3\v\x5\v\x97\n\v\x3\f\x3\f\x3"+
		"\f\x3\r\x3\r\x3\r\x3\r\x3\r\x3\r\x3\r\x3\r\x3\r\x3\r\x5\r\xA6\n\r\x3\r"+
		"\x3\r\x3\r\x3\r\x3\r\x3\r\x3\r\x3\r\x3\r\x3\r\x3\r\x3\r\x3\r\x3\r\x3\r"+
		"\x3\r\x3\r\x3\r\x3\r\x3\r\x3\r\x3\r\x3\r\a\r\xBF\n\r\f\r\xE\r\xC2\v\r"+
		"\x3\xE\x3\xE\x3\xE\x3\xE\x3\xE\a\xE\xC9\n\xE\f\xE\xE\xE\xCC\v\xE\x3\xE"+
		"\x3\xE\x3\xF\x3\xF\x5\xF\xD2\n\xF\x3\x10\x3\x10\x3\x11\x3\x11\x3\x11\x3"+
		"\x11\x3\x11\x3\x12\x3\x12\x3\x13\x3\x13\x3\x13\x2\x2\x3\x18\x14\x2\x2"+
		"\x4\x2\x6\x2\b\x2\n\x2\f\x2\xE\x2\x10\x2\x12\x2\x14\x2\x16\x2\x18\x2\x1A"+
		"\x2\x1C\x2\x1E\x2 \x2\"\x2$\x2\x2\t\x3\x2\x15\x17\x3\x2\x18\x19\x3\x2"+
		"\x1E!\x3\x2\x1C\x1D\x3\x2\t\n\x4\x2\x3\x3\f\xE\x3\x2\x10\x13\xE6\x2&\x3"+
		"\x2\x2\x2\x4-\x3\x2\x2\x2\x6V\x3\x2\x2\x2\bX\x3\x2\x2\x2\n[\x3\x2\x2\x2"+
		"\fk\x3\x2\x2\x2\xEm\x3\x2\x2\x2\x10~\x3\x2\x2\x2\x12\x80\x3\x2\x2\x2\x14"+
		"\x96\x3\x2\x2\x2\x16\x98\x3\x2\x2\x2\x18\xA5\x3\x2\x2\x2\x1A\xC3\x3\x2"+
		"\x2\x2\x1C\xD1\x3\x2\x2\x2\x1E\xD3\x3\x2\x2\x2 \xD5\x3\x2\x2\x2\"\xDA"+
		"\x3\x2\x2\x2$\xDC\x3\x2\x2\x2&*\x5\x4\x3\x2\')\x5\x6\x4\x2(\'\x3\x2\x2"+
		"\x2),\x3\x2\x2\x2*(\x3\x2\x2\x2*+\x3\x2\x2\x2+\x3\x3\x2\x2\x2,*\x3\x2"+
		"\x2\x2-.\a\x3\x2\x2./\a\x4\x2\x2/\x30\a$\x2\x2\x30\x35\x5\b\x5\x2\x31"+
		"\x32\a*\x2\x2\x32\x34\x5\b\x5\x2\x33\x31\x3\x2\x2\x2\x34\x37\x3\x2\x2"+
		"\x2\x35\x33\x3\x2\x2\x2\x35\x36\x3\x2\x2\x2\x36\x38\x3\x2\x2\x2\x37\x35"+
		"\x3\x2\x2\x2\x38\x39\a%\x2\x2\x39:\x5\n\x6\x2:\x5\x3\x2\x2\x2;<\x5\x1C"+
		"\xF\x2<=\a\x14\x2\x2=>\a$\x2\x2>\x43\x5\b\x5\x2?@\a*\x2\x2@\x42\x5\b\x5"+
		"\x2\x41?\x3\x2\x2\x2\x42\x45\x3\x2\x2\x2\x43\x41\x3\x2\x2\x2\x43\x44\x3"+
		"\x2\x2\x2\x44\x46\x3\x2\x2\x2\x45\x43\x3\x2\x2\x2\x46G\a%\x2\x2GH\x5\n"+
		"\x6\x2HW\x3\x2\x2\x2IJ\a$\x2\x2JO\x5\b\x5\x2KL\a*\x2\x2LN\x5\b\x5\x2M"+
		"K\x3\x2\x2\x2NQ\x3\x2\x2\x2OM\x3\x2\x2\x2OP\x3\x2\x2\x2PR\x3\x2\x2\x2"+
		"QO\x3\x2\x2\x2RS\a%\x2\x2ST\a,\x2\x2TU\x5\n\x6\x2UW\x3\x2\x2\x2V;\x3\x2"+
		"\x2\x2VI\x3\x2\x2\x2W\a\x3\x2\x2\x2XY\x5\x1C\xF\x2YZ\a\x14\x2\x2Z\t\x3"+
		"\x2\x2\x2[_\a(\x2\x2\\^\x5\f\a\x2]\\\x3\x2\x2\x2^\x61\x3\x2\x2\x2_]\x3"+
		"\x2\x2\x2_`\x3\x2\x2\x2`\x62\x3\x2\x2\x2\x61_\x3\x2\x2\x2\x62\x63\a)\x2"+
		"\x2\x63\v\x3\x2\x2\x2\x64l\x5\xE\b\x2\x65\x66\x5\x14\v\x2\x66g\a+\x2\x2"+
		"gl\x3\x2\x2\x2hi\x5\x16\f\x2ij\a+\x2\x2jl\x3\x2\x2\x2k\x64\x3\x2\x2\x2"+
		"k\x65\x3\x2\x2\x2kh\x3\x2\x2\x2l\r\x3\x2\x2\x2mn\a\x5\x2\x2no\a$\x2\x2"+
		"op\x5\x18\r\x2pq\a%\x2\x2qr\x5\n\x6\x2rs\x5\x10\t\x2s\xF\x3\x2\x2\x2t"+
		"u\a\x6\x2\x2uv\a$\x2\x2vw\x5\x18\r\x2wx\a%\x2\x2xy\x5\n\x6\x2yz\x5\x10"+
		"\t\x2z\x7F\x3\x2\x2\x2{}\x5\x12\n\x2|{\x3\x2\x2\x2|}\x3\x2\x2\x2}\x7F"+
		"\x3\x2\x2\x2~t\x3\x2\x2\x2~|\x3\x2\x2\x2\x7F\x11\x3\x2\x2\x2\x80\x81\a"+
		"\a\x2\x2\x81\x82\x5\n\x6\x2\x82\x13\x3\x2\x2\x2\x83\x84\x5\x1E\x10\x2"+
		"\x84\x85\a\x14\x2\x2\x85\x86\a#\x2\x2\x86\x87\x5\x18\r\x2\x87\x97\x3\x2"+
		"\x2\x2\x88\x89\x5 \x11\x2\x89\x8A\a\x14\x2\x2\x8A\x8B\a#\x2\x2\x8B\x8C"+
		"\a(\x2\x2\x8C\x91\x5\x18\r\x2\x8D\x8E\a*\x2\x2\x8E\x90\x5\x18\r\x2\x8F"+
		"\x8D\x3\x2\x2\x2\x90\x93\x3\x2\x2\x2\x91\x8F\x3\x2\x2\x2\x91\x92\x3\x2"+
		"\x2\x2\x92\x94\x3\x2\x2\x2\x93\x91\x3\x2\x2\x2\x94\x95\a)\x2\x2\x95\x97"+
		"\x3\x2\x2\x2\x96\x83\x3\x2\x2\x2\x96\x88\x3\x2\x2\x2\x97\x15\x3\x2\x2"+
		"\x2\x98\x99\a\b\x2\x2\x99\x9A\x5\x18\r\x2\x9A\x17\x3\x2\x2\x2\x9B\x9C"+
		"\b\r\x1\x2\x9C\x9D\a$\x2\x2\x9D\x9E\x5\x18\r\x2\x9E\x9F\a%\x2\x2\x9F\xA6"+
		"\x3\x2\x2\x2\xA0\xA1\a\"\x2\x2\xA1\xA6\x5\x18\r\r\xA2\xA6\x5\x1A\xE\x2"+
		"\xA3\xA6\x5\"\x12\x2\xA4\xA6\a\x14\x2\x2\xA5\x9B\x3\x2\x2\x2\xA5\xA0\x3"+
		"\x2\x2\x2\xA5\xA2\x3\x2\x2\x2\xA5\xA3\x3\x2\x2\x2\xA5\xA4\x3\x2\x2\x2"+
		"\xA6\xC0\x3\x2\x2\x2\xA7\xA8\f\f\x2\x2\xA8\xA9\a\v\x2\x2\xA9\xBF\x5\x18"+
		"\r\r\xAA\xAB\f\v\x2\x2\xAB\xAC\t\x2\x2\x2\xAC\xBF\x5\x18\r\f\xAD\xAE\f"+
		"\n\x2\x2\xAE\xAF\t\x3\x2\x2\xAF\xBF\x5\x18\r\v\xB0\xB1\f\t\x2\x2\xB1\xB2"+
		"\t\x4\x2\x2\xB2\xBF\x5\x18\r\n\xB3\xB4\f\b\x2\x2\xB4\xB5\t\x5\x2\x2\xB5"+
		"\xBF\x5\x18\r\t\xB6\xB7\f\a\x2\x2\xB7\xB8\a\x1A\x2\x2\xB8\xBF\x5\x18\r"+
		"\b\xB9\xBA\f\x6\x2\x2\xBA\xBB\a\x1B\x2\x2\xBB\xBF\x5\x18\r\a\xBC\xBD\f"+
		"\xE\x2\x2\xBD\xBF\t\x6\x2\x2\xBE\xA7\x3\x2\x2\x2\xBE\xAA\x3\x2\x2\x2\xBE"+
		"\xAD\x3\x2\x2\x2\xBE\xB0\x3\x2\x2\x2\xBE\xB3\x3\x2\x2\x2\xBE\xB6\x3\x2"+
		"\x2\x2\xBE\xB9\x3\x2\x2\x2\xBE\xBC\x3\x2\x2\x2\xBF\xC2\x3\x2\x2\x2\xC0"+
		"\xBE\x3\x2\x2\x2\xC0\xC1\x3\x2\x2\x2\xC1\x19\x3\x2\x2\x2\xC2\xC0\x3\x2"+
		"\x2\x2\xC3\xC4\a\x14\x2\x2\xC4\xC5\a$\x2\x2\xC5\xCA\a\x14\x2\x2\xC6\xC7"+
		"\a*\x2\x2\xC7\xC9\a\x14\x2\x2\xC8\xC6\x3\x2\x2\x2\xC9\xCC\x3\x2\x2\x2"+
		"\xCA\xC8\x3\x2\x2\x2\xCA\xCB\x3\x2\x2\x2\xCB\xCD\x3\x2\x2\x2\xCC\xCA\x3"+
		"\x2\x2\x2\xCD\xCE\a%\x2\x2\xCE\x1B\x3\x2\x2\x2\xCF\xD2\x5\x1E\x10\x2\xD0"+
		"\xD2\x5 \x11\x2\xD1\xCF\x3\x2\x2\x2\xD1\xD0\x3\x2\x2\x2\xD2\x1D\x3\x2"+
		"\x2\x2\xD3\xD4\t\a\x2\x2\xD4\x1F\x3\x2\x2\x2\xD5\xD6\a\xF\x2\x2\xD6\xD7"+
		"\a \x2\x2\xD7\xD8\x5\x1C\xF\x2\xD8\xD9\a\x1E\x2\x2\xD9!\x3\x2\x2\x2\xDA"+
		"\xDB\t\b\x2\x2\xDB#\x3\x2\x2\x2\xDC\xDD\a\x2\x2\x3\xDD%\x3\x2\x2\x2\x12"+
		"*\x35\x43OV_k|~\x91\x96\xA5\xBE\xC0\xCA\xD1";
	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
} // namespace HaCS
